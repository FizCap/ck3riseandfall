#### * * * * * * * * * * * * * * * * * * * * * * ####
####   .##########   .####   .###  .#####        ####
####   |####   )###  |####   |###   |###   .##   ####
####   |##########   |####   |###   |###         ####
####   |####   \###  |####   /###   |###   .##   ####
####   |####   |###   \#########   .#####        ####
#### * * * *  REASSEMBLED UI: CHARACTER  * * * * ####

window = {
	name = "character_window"
	datacontext = "[GetVariableSystem]"
	datacontext = "[CharacterWindow.GetCharacter]"
	movable = no
	layer = middle
	allow_outside = yes

	# place it above so others filter above this subwindow.
	RUI_social_relationship_sub_window = {}

	# using = Window_Size_Sidebar
	size = { 610 100% }
	using = Window_Background_Sidebar

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		position_x = 0

		on_start = "[GetVariableSystem.Set( 'hide_bottom_left_HUD', 'true' )]"
		on_start = "[GetVariableSystem.Set( 'RUI_Ch_tabs', 'tab_politics' )]"
		on_finish = "[GetVariableSystem.Set( 'RUI_Ch_show_social_relationship', 'true' )]"

		using = RUI_Ch_CTFA_template_01 # *CTFA

		using = RUI_Ch_SYCT_template_01 # *SYCT

		using = RUI_Ch_ELFD_template_01 # *ELFD

		using = RUI_Ch_PODS_template_01

		using = RUI_Ch_PRDB_template_01

		using = RUI_Ch_GDHJ_template_02
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		position_x = -60

		on_start = "[GetVariableSystem.Clear( 'hide_bottom_left_HUD' )]"
		on_start = "[GetVariableSystem.Clear( 'RUI_Ch_tabs' )]"
		on_start = "[GetVariableSystem.Clear( 'RUI_Ch_keep_tab' )]"
		on_start = "[GetVariableSystem.Clear( 'RUI_Ch_expanded' )]"
		on_start = "[GetVariableSystem.Clear( 'RUI_Ch_enlarged_mode' )]"
		on_start = "[GetVariableSystem.Clear( 'RUI_Ch_hide_info' )]"
		on_start = "[GetVariableSystem.Clear( 'RUI_Ch_show_year_of_b_n_d' )]"
		# on_start = "[GetVariableSystem.Clear( 'RUI_Ch_portrait_torso' )]"
		on_start = "[GetVariableSystem.Clear( 'RUI_Ch_show_social_relationship' )]"

		using = RUI_Ch_PODS_template_02
	}

	using = RUI_Ch_custom_trait_list

	using = RUI_Ch_CTFA_template_02 # *CTFA

	using = RUI_Ch_HIBL_template_01

	using = RUI_Ch_ANCL_template_01

	using = RUI_Ch_GDHJ_template_03

	RUI_Ch_AGOT_type_05 = {} # *AGOT

	RUI_Ch_GDHJ_type_01 = {}

	vbox = {
		name = "window_contents"
		using = Window_Margins_Sidebar
		allow_outside = yes

		visible = "[ShowCharacterWindow]"

		########################################
		### ビューコンテンツ / View Contents ###
		########################################

		# 以下のコンテンツは「<このMODフォルダー>/gui/views」で管理されています
		# The following contents are managed in "<This MOD folder>/gui/views"

		RUI_Ch_main_character_view = {}		# メインキャラクタービュー / Main Character View
											# ├ キャラクタープロフィールサブビュー / Character Profile Sub-View
											# ├ 社会的関係性サブビュー / Social Relationship Sub-View
											# └ 詳細ボタンサブビュー / Details Buttons Sub-view

		RUI_Ch_under_info_view = {}			# 下部情報ビュー / Under Info View

		RUI_Ch_tabs_view = {}				# タブビュー / Tab View

		#####################################
		### タブコンテンツ / Tab Contents ###
		#####################################

		# 以下のコンテンツは「<このMODフォルダー>/gui/tabs」で管理されています
		# The following contents are managed in "<This MOD folder>/gui/tabs"

		widget = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			allow_outside = yes

			using = Animation_Character_Window_Refresh

			RUI_Ch_politics_tab = {}		# 政治タブ / Politics Tab
											# ├ 家族セクション / Family Section
											# ├ 評議会セクション / Council Section
											# └ 家族セクション / Family Section

			RUI_Ch_family_tab = {}			# 家族タブ / Family Tab

			RUI_Ch_relationship_tab = {}	# 人間関係タブ / Relationship Tab

			RUI_Ch_court_tab = {}			# 廷臣タブ / Court Tab

			RUI_Ch_vassals_tab = {}			# 封臣タブ / Vassals Tab

			RUI_Ch_PODS_type_10 = {} # *PODS
			RUI_Ch_PODS_type_13 = {}
			RUI_Ch_PODS_type_15 = {}

			RUI_Ch_DTRS_type_10 = {} # *DTRS
			RUI_Ch_DTRS_type_12 = {}

			RUI_Ch_TTFW_type_03 = {} # *TTFW

			RUI_Ch_CSEX_type_02 = {} # *CSEX



			# 新しいタブを追加する場合、「RUI_Ch_0000_tab = {}」をここに追加します。「0000」は「gui/tabs/<ユーザー作成ファイル>.gui」で作成したものと同じ文字列に置き換えてください。
			# If you add a new tab, add "RUI_Ch_0000_tab = {}" here. Replace "0000" with the same string as created in "gui/tabs/<user created file>.gui".



			# タブを追加するには、更に以下のファイルを編集する必要があります:
			# - gui/views/RUI_Ch_tabs_view.gui
			# - gui/tabs/<ユーザー作成ファイル>.gui 	詳細は「gui/tabs/BLANK_TAB.gui」を参照してください

			# To add tabs, you also need to edit the following files:
			# - gui/views/RUI_Ch_tabs_view.gui
			# - gui/tabs/<User-created file>.gui		See gui/tabs/BLANK_TAB.gui for details



			##############################################
			### 拡張表示コンテンツ / Expanded Contents ###
			##############################################

			# 以下のコンテンツは「<このMODフォルダー>/gui/expanded」で管理されています
			# The following contents are managed in "<This MOD folder>/gui/expanded"

			RUI_Ch_expanded = {}			# 拡張表示 / Expanded
											# ├ キャラクターリスト / Character List
											# ├ 称号リスト / Title List
											# ├ 外交リスト / Diplomacy List
											# ├ 特性リスト /Trait List
											# └ 補正値リスト / Modifier List
		}

		expand = {}
	}

	### デバッグウィンドウ / Debug Window ###
	RUI_Ch_debug_sub_window = {}



	#######################################################
	### 廷臣、封臣フィルター / Courtier, Vassals Filter ###
	#######################################################
	window_character_filter = {
		name = "court_character_filter_window"
		datacontext = "[CharacterWindow.GetCourt]"
		position = { 525 275 }

		blockoverride "editbox_properties" {
			name = "court_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory( 'age_filter_category' )]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'adult_filter' )]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory( 'personal_filter_category' )]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'religion_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'culture_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'hook_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'married_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'gender_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'health_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'inspiration_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						visible = "[Not(RUI_Ch_OBFS_macro_06)]" # *OBFS
						datacontext = "[CharacterSelectionList.GetFilter( 'sexuality_filter' )]"
					}
				}
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter( 'dynasty_filter' )]"
			}
		}
	}
	window_character_filter = {
		name = "vassal_filter_window"
		datacontext = "[CharacterWindow.GetVassals]"
		position = { 525 275 }

		blockoverride "editbox_properties" {
			name = "vassal_text_filter"
			ontextedited = "[CharacterSelectionList.SetPattern]"
			oneditingfinished = "[CharacterSelectionList.FinishEdit]"
		}

		blockoverride "addition_filter" {
			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory( 'age_filter_category' )]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'adult_filter' )]"
					}
				}
			}

			vbox_filter_group = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetCategory( 'personal_filter_category' )]"
				blockoverride "filters" {
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'vassal_stance_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'religion_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'culture_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'hook_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'married_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'gender_filter' )]"
					}
					filter_item = {
						layoutpolicy_horizontal = expanding
						datacontext = "[CharacterSelectionList.GetFilter( 'health_filter' )]"
					}
				}
			}

			filter_item = {
				layoutpolicy_horizontal = expanding
				datacontext = "[CharacterSelectionList.GetFilter( 'dynasty_filter' )]"
			}
		}
	}

	RUI_Ch_PODS_type_04 = {}
	RUI_Ch_PODS_type_06 = {}

	RUI_Ch_GDHJ_type_15 = {}
}



##################################################
### タイプとテンプレート / Types and Templates ###
##################################################
types CharacterWindow
{
	type realm_name_and_type_vbox = vbox {
		layoutpolicy_horizontal = expanding

		hbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				name = "character_title"
				layoutpolicy_horizontal = expanding
				# text = "[Title.GetNameNoTooltip|U]"
				using = TitleGetNameNoTooltip
				using = RUI_Ch_GDHJ_template_01
				default_format = "#medium"
				using = Font_Size_Medium
				max_width = 300
			}

			expand = {}
		}

		text_single = {
			name = "faction"
			visible = "[Title.HasFaction]"
			layoutpolicy_horizontal = expanding
			autoresize = no
			text = "CV_CIVIL_WAR_FACTION"
			default_format = "#low"
			align = nobaseline
			fontsize_min = 14
		}

		text_single = {
			name = "government_type"
			visible = "[Not( Title.HasFaction )]"
			layoutpolicy_horizontal = expanding
			autoresize = no
			text = "CV_REALM_TYPE"
			default_format = "#low"
			align = nobaseline
			fontsize_min = 14
		}
	}

	type skill_icon_label_vertical = widget {
		size = { 40 60 }

		icon = {
			name = "skill_icon"
			texture = "gfx/interface/icons/icon_skills.dds"
			size = { 24 24 }
			framesize = { 60 60 }
			position = { -10 17 }

			block "icon"
			{
				frame = "[SkillItem.GetFrame]"
			}
		}

		block "tooltip"
		{
			using = RUI_Ch_OBFS_template_13
			# tooltip = "SKILL_ITEM_TOOLTIP"
			using = tooltip_ne
		}

		text_single = {
			name = "skill_value"
			parentanchor = top|hcenter
			position = { 5 17 }
			align = center

			block "value"
			{
				# text = "[SkillItem.GetValue]"
				using = RUI_Ch_OBFS_template_14
				using = RUI_Ch_PODS_template_09
			}
		}
	}

	type modifier_item_icon = widget {
		datacontext = "[ModifierItem.GetStaticModifier]"

		size = { 25 25 }

		# Preview list
		icon = {
			# the tag is hard-coded, if you want to change the name or add a new one please contact someone from code team
			visible = "[ModifierItem.HasTooltipDataByTag('preview_list')]"

			size = { 100% 100% }
			texture = "[ModifierItem.GetIcon]"

			block "icon_data" {
				alwaystransparent = no
			}

			tooltipwidget = {
				object_tooltip_pop_out = {
					datacontext = "[ModifierItem.GetPreviewList]"

					blockoverride "header_additions" {
						hbox = {
							margin_right = 10
							margin_top = 8
							margin_left = -4

							icon = {
								size = { 32 32 }
								texture = "[StaticModifier.GetIcon]"
								tintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}

					blockoverride "title_text" {
						margin = { 0 8 }
						text = "[StaticModifier.GetName]"
					}

					blockoverride "concept_link" {
						text = ""
					}

					blockoverride "main_description" {
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							text_multi = {
								autoresize = yes
								max_width = 350
								text = "[TimedModifierPreviewList.GetScaledDesc]"
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								datamodel = "[TimedModifierPreviewList.GetItems]"

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding

										text_single = {
											layoutpolicy_horizontal = growing
											text = "[TimedModifierPreviewItem.GetTitle]"
										}

										text_single = {
											layoutpolicy_horizontal = growing
											text = "[TimedModifierPreviewItem.GetExpirationDate]"
										}
									}
								}
							}

							textbox = {
								name = "input_info"
								layoutpolicy_horizontal = expanding
								margin_top = 10
								margin_bottom = 20
								using = DefaultTooltipText
								multiline = yes
								block "input_info_text" {}
								fonttintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}
				}
			}
		}

		# Single modifier
		icon = {
			# the tag is hard-coded, if you want to change the name or add a new one please contact someone from code team
			visible = "[ModifierItem.HasTooltipDataByTag('single_modifier')]"
			size = { 100% 100% }
			texture = "[ModifierItem.GetIcon]"

			block "icon_data" {
				alwaystransparent = no
			}

			tooltipwidget = {
				static_modifier_tooltip = {
					datacontext = "[ModifierItem.GetSingleModifierTooltipData]"

					blockoverride "description_text_data" {
						text = "[TimedModifierSingleItem.GetDesc]"
					}
				}
			}
		}

		# Scaled single modifier
		icon = {
			# the tag is hard-coded, if you want to change the name or add a new one please contact someone from code team
			visible = "[ModifierItem.HasTooltipDataByTag('scaled_single_modifier')]"

			size = { 100% 100% }
			texture = "[ModifierItem.GetIcon]"

			block "icon_data" {
				alwaystransparent = no
			}

			tooltipwidget = {
				scaled_static_modifier_tooltip = {
					datacontext = "[ModifierItem.GetScaledSingleModifierTooltipData]"

					blockoverride "description_text_data" {
						text = "[TimedModifierScaledSingleItem.GetDesc]"
					}

					blockoverride "effects_datamodel" {
						datamodel = "[TimedModifierScaledSingleItem.GetEffectItems]"
					}

					blockoverride "expiration_date" {
						text_single = {
							layoutpolicy_horizontal = growing
							text = "[TimedModifierScaledSingleItem.GetExpirationDate]"
						}
						margin_bottom = 10
					}
				}
			}
		}
	}
}

template Animation_Character_Window_Refresh
{
	state = {
		name = character_window_refresh
		using = Animation_Refresh_FadeOut
		alpha = 0.65

		using = RUI_Ch_GDHJ_template_04
	}

	state = {
		using = Animation_Refresh_FadeIn
	}
}

template Animation_Character_Window_Refresh_Short
{
	state = {
		name = character_window_refresh
		using = Animation_Refresh_FadeOut
		alpha = 0.8

		using = RUI_Ch_GDHJ_template_04
	}

	state = {
		using = Animation_Refresh_FadeIn
		duration = 0.25
	}
}

template Character_Window_Relation_Icon
{
	size = { 24 24 }
	framesize = { 40 40 }

	visible = "[ScriptedRelation.HasRelationBetween( CharacterWindow.GetCharacter, Character.Self )]"

	tooltipwidget = {
		scripted_relation_tooltip = {
			blockoverride "description_text" {
				text = "[GetScriptedRelationTooltip( ScriptedRelation, CharacterWindow.GetCharacter, Character )]"
			}
		}
	}
}

template TitleGetNameNoTooltip {
	text = "[Title.GetNameNoTooltip|U]"
}

# compatibility warning supressor
# PODS
types PODCompatibilityTypes {
	type pod_warning_character = pod_compatibility_warning {
		using = pod_warning_character_visible
		blockoverride "button_close" { onclick = "[GetVariableSystem.Toggle('pod_warning_character')]" }
		blockoverride "text" { text = "[Localize('pod_mod_compatibility_character')]" }
		blockoverride "header_text" { text = "[Localize('pod_mod_compatibility_header')]" }
	}
}
template pod_warning_character_visible {
	visible = "[Not(GetVariableSystem.Exists('pod_warning_character'))]"
}

# GH
types GHCompatibilityTypes {
	type gh_overwrite_window_character = gh_basic_overwrite_type {
		using = gh_warning_character_visible
		blockoverride "gui_window_name" { raw_text = "gui/window_character" }
		blockoverride "text_explanation" { text = "window_character_incompatibility_desc" }
	}
}
template gh_warning_character_visible {}
