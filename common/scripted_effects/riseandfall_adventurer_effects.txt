riseandfall_check_dynasty_for_adventurers_se = {
    # Expecting character scope (independent ruler). Check their dynasty members.
    # Re-save the calling ruler to a stable label to ensure availability inside nested scopes
    save_scope_as = independent_ruler
    if = {
        limit = { has_dynasty = yes }
        dynasty = {
            every_dynasty_member = {
                # Save the current dynasty member for nested spouse checks
                save_scope_as = candidate
                limit = {
                    is_landed = no
                    is_imprisoned = no
                    NOT = { has_government = landless_adventurer_government }
                    # Exclude anyone who is an heir of the independent ruler (primary/designated/player)
                    NOT = { OR = { is_heir_of = scope:independent_ruler is_primary_heir_of = scope:independent_ruler is_player_heir_of = scope:independent_ruler } }
                    # Exclude anyone who is spouse to any ruler (married into another realm)
                    NOT = { every_ruler = { limit = { is_spouse_of = scope:candidate } } }
                            # Exclude dynasty members who are allied, married to, or highly positive toward the ruler
                    # exclude dynasty members who are allied to or highly positive toward the ruler
                    NOT = { OR = { is_allied_to = scope:independent_ruler opinion = { target = scope:independent_ruler value >= 75 } } }
                    # Exclude religious/scholarly characters who should not become adventurers
                    NOT = {
                        OR = {
                            has_trait = devoted
                            has_trait = incapable
                            has_trait = maester
                            has_trait = septon
                            has_trait = high_septon
                            has_trait = eunuch
                            has_trait = beardless_eunuch
                            has_trait = nightswatch
                            has_trait = craven
                        }
                    }
                    # Cowardly check moved to riseandfall_turn_into_adventurer_se with other trait checks
                    age >= 16
                    # Only qualify if they have a claim on a title whose holder is an independent ruler
                    any_claim = { tier >= tier_kingdom holder = { is_independent_ruler = yes } }
                }

                # Determine a claim target title and disqualify if candidate is allied/spouse/too-positive toward that claim holder
                set_variable = { name = rf_disqualify value = 0 }
                if = {
                    limit = { any_claim = { tier >= tier_kingdom holder = { is_independent_ruler = yes } } }
                    random_claim = {
                        limit = { tier >= tier_kingdom holder = { is_independent_ruler = yes } }
                        save_scope_as = claim_target_title
                    }

                    # If candidate is allied to, spouse of, or very positive toward the claim holder, disqualify
                    if = {
                        limit = { OR = { is_allied_to = scope:claim_target_title.holder is_spouse_of = scope:claim_target_title.holder opinion = { target = scope:claim_target_title.holder value >= 75 } } }
                        set_variable = { name = rf_disqualify value = 1 }
                    }
                }

                # Roll per individual dynasty member for adventurer creation only if not disqualified
                if = {
                    limit = { var:rf_disqualify = 0 }

                    # Base chance is 1%; trait bonuses: dragonrider +2%, ambitious +2%, brave +1%
                    set_variable = { name = rf_adventurer_trait_chance value = 0 }
                    if = { limit = { has_trait = dragonrider } change_variable = { name = rf_adventurer_trait_chance add = 2 } }
                    if = { limit = { has_trait = ambitious } change_variable = { name = rf_adventurer_trait_chance add = 2 } }
                    if = { limit = { has_trait = brave } change_variable = { name = rf_adventurer_trait_chance add = 1 } }

                    # Final chance = base 1 + trait bonuses, clamp to [0,100]
                    set_variable = { name = rf_adventurer_final_chance value = 0.5 }
                    change_variable = { name = rf_adventurer_final_chance add = var:rf_adventurer_trait_chance }
                    clamp_variable = { name = rf_adventurer_final_chance min = 0 max = 100 }

                    random = {
                        chance = var:rf_adventurer_final_chance
                        hidden_effect = {
                            riseandfall_do_create_adventurer_se = yes
                        }
                    }
                    remove_variable = rf_adventurer_trait_chance
                    remove_variable = rf_adventurer_final_chance
                }
                remove_variable = rf_disqualify
            }
        }
    }
}


riseandfall_marry_male_target_se = {
    # Expecting character scope (root) — the adventurer leader. Only operate on that character.
    create_character = {
        location = scope:independent_ruler.capital_province
        culture = scope:independent_ruler.culture
        faith = scope:independent_ruler.faith
        age = { 16 20 }
        gender = female
        save_scope_as = created_spouse
    }
    marry = scope:created_spouse
}


riseandfall_marry_female_target_se = {
    # Expecting character scope (root) — the adventurer leader. Only operate on that character.
    create_character = {
        location = scope:independent_ruler.capital_province
        culture = scope:independent_ruler.culture
        faith = scope:independent_ruler.faith
        age = { 16 20 }
        gender = male
        save_scope_as = created_spouse
    }
    marry_matrilineal = scope:created_spouse
}


### Dedicated creation effect (guarded to avoid double-creation if multiple chances hit)
riseandfall_do_create_adventurer_se = {
    # Ensure we haven't already made this character into an adventurer (guard against multiple triggers)
    if = {
        limit = { NOT = { has_character_flag = riseandfall_newadventurer } }

        save_scope_as = adventurer_child

        create_adventurer_title = {
            name = riseandfall_adventurer_title_name
            holder = scope:adventurer_child
            save_scope_as = created_adventurer_title
        }

        # Mark the title object and store the title scope as a variable on the adventurer
        scope:created_adventurer_title = {
            set_variable = { name = riseandfall_created_adventurer_title value = yes }
        }

        scope:adventurer_child = {
            add_realm_law = camp_purpose_legitimists
            set_variable = { name = adventurer_base_year_income value = scope:independent_ruler.monthly_character_income }
            change_variable = { name = adventurer_base_year_income multiply = 60 }

            set_variable = { name = adventurer_start_gold_mult value = scope:adventurer_child.stewardship }
            change_variable = { name = adventurer_start_gold_mult multiply = 0.1 }

            set_variable = { name = adventurer_starting_gold value = var:adventurer_base_year_income }
            change_variable = { name = adventurer_starting_gold multiply = var:adventurer_start_gold_mult }
            round_variable = { name = adventurer_starting_gold nearest = 1 }

            if = {
                limit = { var:adventurer_starting_gold >= 0 }
                add_gold = var:adventurer_starting_gold
            }
            add_character_modifier = { modifier = riseandfall_adventurer_gold_mod }
            add_character_flag = riseandfall_newadventurer
            add_character_flag = { flag = riseandfall_newadventurer_war_block years = 10 }

            remove_variable = adventurer_starting_gold
            remove_variable = adventurer_base_year_income
            remove_variable = adventurer_start_gold_mult
        }

        scope:adventurer_child = {
            # Prefer scaling to the holder of a claim this adventurer has (empire first, then kingdom).
            # Save a claim target title for strength scaling only; fallback to independent_ruler if none.
            if = {
                limit = { any_claim = { tier >= tier_empire } }
                random_claim = {
                    limit = { tier >= tier_empire holder = { is_independent_ruler = yes } }
                    save_scope_as = claim_target_title
                }
            }
            else_if = {
                limit = { any_claim = { tier >= tier_kingdom } }
                random_claim = {
                    limit = { tier >= tier_kingdom holder = { is_independent_ruler = yes } }
                    save_scope_as = claim_target_title
                }
            }

            if = {
                limit = { exists = scope:claim_target_title.holder }
                set_variable = { name = adventurer_base_levies value = scope:claim_target_title.holder.military_power }
            }
            else = {
                set_variable = { name = adventurer_base_levies value = scope:independent_ruler.military_power }
            }
            change_variable = { name = adventurer_base_levies multiply = 0.10 }

            set_variable = { name = adventurer_multiplier value = scope:adventurer_child.martial }
            change_variable = { name = adventurer_multiplier multiply = 0.1 }

            random_list = {
                15 = { change_variable = { name = adventurer_multiplier multiply = 0.75 } }
                70 = { }
                10 = { change_variable = { name = adventurer_multiplier multiply = 1.25 } }
                5 = { change_variable = { name = adventurer_multiplier multiply = 1.75 } }
            }

            set_variable = { name = adventurer_army_size value = var:adventurer_base_levies }
            change_variable = { name = adventurer_army_size multiply = var:adventurer_multiplier }
            round_variable = { name = adventurer_army_size nearest = 1 }

            set_variable = { name = adventurer_max_cap value = var:adventurer_base_levies }
            change_variable = { name = adventurer_max_cap multiply = 6 }

            remove_variable = adventurer_base_levies
            remove_variable = adventurer_max_cap

            spawn_army = {
                name = riseandfall_adventurer_host_name
                levies = var:adventurer_army_size
                war_keep_on_attacker_victory = no
                inheritable = no
                location = scope:independent_ruler.capital_province
            }
            remove_variable = adventurer_army_size
            remove_variable = adventurer_multiplier

            set_variable = { name = rf_while_counter value = 0 }
            set_variable = { name = rf_while_loop_target value = scope:adventurer_child.diplomacy }
            clamp_variable = { name = rf_while_loop_target min = 0 max = 20 }
            riseandfall_run_create_knights_while_se = yes
            remove_variable = rf_while_counter
            remove_variable = rf_while_loop_target
        }
    }
}


riseandfall_adventurer_press_claims_se = {
    # Using saved scope: scope:independent_adventurer = the adventurer character

    # Try empire claims first
    if = {
        limit = { any_claim = { tier >= tier_empire } }
        # pick a random empire-tier claim whose holder is an independent ruler
        random_claim = {
            limit = { tier >= tier_empire holder = { is_independent_ruler = yes } }
            save_scope_as = claim_target_title
        }

        scope:independent_adventurer = {
            if = {
                limit = { exists = scope:claim_target_title.holder }

                # If we're stronger than the holder, attempt an auto-declare only when no truce/alliance
                    if = {
                        limit = { scope:independent_adventurer.military_power > scope:claim_target_title.holder.military_power }
                        if = {
                            limit = { scope:claim_target_title.holder = { NOT = { OR = { has_truce = scope:independent_adventurer is_allied_to = scope:independent_adventurer } } has_character_flag = riseandfall_newadventurer_war_block } }
                            if = { limit = { NOT = { has_character_flag = riseandfall_newadventurer_war_block } } start_war = { casus_belli = claim_cb target = scope:claim_target_title.holder claimant = scope:independent_adventurer target_title = scope:claim_target_title } }
                        }
                    else = {
                        # Not stronger: small chance, respect truces/alliances
                        random_list = {
                            5 = {
                                if = { limit = { scope:claim_target_title.holder = { NOT = { OR = { has_truce = scope:independent_adventurer is_allied_to = scope:independent_adventurer } } } } start_war = { casus_belli = claim_cb target = scope:claim_target_title.holder claimant = scope:independent_adventurer target_title = scope:claim_target_title } }
                            }
                            95 = { }
                        }
                    }
                }
            }
        }

        # final safety: if holder is independent and adventurer allowed to war, try a default declare (covers edge cases)
        if = { limit = { scope:claim_target_title.holder = { is_independent_ruler = yes } NOT = { has_character_flag = riseandfall_newadventurer_war_block } } start_war = { casus_belli = claim_cb target = scope:claim_target_title.holder claimant = scope:independent_adventurer target_title = scope:claim_target_title } }
    }
    else = {
        # No empire claims: try kingdom-tier claims with the same strength checks
        if = {
            limit = { any_claim = { tier >= tier_kingdom } }
            random_claim = {
                limit = { tier >= tier_kingdom holder = { is_independent_ruler = yes } }
                save_scope_as = claim_target_title
            }

            scope:independent_adventurer = {
                if = {
                    limit = { exists = scope:claim_target_title.holder }

                    if = {
                        limit = { scope:independent_adventurer.military_power > scope:claim_target_title.holder.military_power }
                        if = { limit = { scope:claim_target_title.holder = { NOT = { OR = { has_truce = scope:independent_adventurer is_allied_to = scope:independent_adventurer } } has_character_flag = riseandfall_newadventurer_war_block } } start_war = { casus_belli = claim_cb target = scope:claim_target_title.holder claimant = scope:independent_adventurer target_title = scope:claim_target_title } }
                    }
                    else = {
                        random_list = {
                            5 = { if = { limit = { scope:claim_target_title.holder = { NOT = { OR = { has_truce = scope:independent_adventurer is_allied_to = scope:independent_adventurer } } } } start_war = { casus_belli = claim_cb target = scope:claim_target_title.holder claimant = scope:independent_adventurer target_title = scope:claim_target_title } } }
                            95 = { }
                        }
                    }
                }
            }
        }
    }
}


riseandfall_remove_adventurer_gold_mod_if_not_landless_se = {
    # Expecting character scope (the ruler). Remove the adventurer gold modifier when no longer landless.
    remove_character_modifier = riseandfall_adventurer_gold_mod
}


# Create a single knight companion for the adventurer and add them to the adventurer's travel plan.
# Expects to be called from a context where `adventurer_child` saved scope exists (save_scope_as = adventurer_child)
riseandfall_create_adventurer_knight_se = {
    # Create a single knight near the independent ruler's capital and save scope for adding as companion
    create_character = {
        employer = scope:adventurer_child
        culture = scope:adventurer_child.culture
        faith = scope:adventurer_child.faith
        age = { 18 35 }
        gender = male
        # Give a small chance for knightly traits via random_traits_list if desired; keep simple for now
        save_scope_as = created_knight
    }

    # Cleanup saved scope
    clear_saved_scope = created_knight
}

# Recursive runner: create knights until rf_while_counter >= rf_while_loop_target
riseandfall_run_create_knights_while_se = {
    if = {
        limit = { var:rf_while_counter < var:rf_while_loop_target }
        # Create one knight
        riseandfall_create_adventurer_knight_se = yes
        # increment counter
        change_variable = { name = rf_while_counter add = 1 }
        # recurse
        riseandfall_run_create_knights_while_se = yes
    }
}


