##########################
# Rise and Fall - Realm Stability
# Computes a 0..100 realm stability score and stores it on the ruler as
# riseandfall_realm_stability_score
# Weighting (user spec):
#  - 50% ruler stats (Diplomacy/Martial/Stewardship/Intrigue/Learning)
#    For every full 10 points in a stat -> +10 (max 50)
#  - 20% legitimacy (based on ruler's legitimacy level: 1=0, 2=4, 3=8, 4=14, 5=20)
#  - 30% vassal relations (average direct vassal opinion -100..100 mapped to 0..30)

riseandfall_calculate_realm_stability_se = {
    # Root scope: called from an every_ruler on_action, so root is the ruler
    # Clear any previous working vars
    remove_variable = riseandfall_rs_stats_component
    remove_variable = riseandfall_rs_vassals_component

    ########################################
    # 1) RULER STATS (per-stat -10..+10, total -50..+50)
    # New rule: for each stat, contribution = stat - 10, clamped to [-10,10].
    #   - stat < 10 => negative contribution of -1 per point below 10 (cap -10)
    #   - stat > 10 => positive contribution of +1 per point above 10 (cap +10)
    # Total stats component is the sum of Diplomacy/Martial/Stewardship/Intrigue/Learning
    set_variable = { name = riseandfall_rs_stats_component value = 0 }

    # If ruler is under regency/puppet_regency, save the active diarch scope so we can read their stats.
    if = {
        limit = {
            AND = {
                OR = { has_diarchy_type = regency has_diarchy_type = puppet_regency }
            }
        }
        diarch = { save_scope_as = diarch }
        set_variable = { name = riseandfall_rs_use_diarch_stats value = 1 }
    }
    else = { set_variable = { name = riseandfall_rs_use_diarch_stats value = 0 } }

    # Helper macro-like repeated block for each stat: compute tmp_add = source_stat - 10 and apply
    # More aggressive negative scaling: lower stats (far below 10) penalize much more.
    # Positive scaling increased so good stats help more.
    # Diplomacy
    if = { limit = { var:riseandfall_rs_use_diarch_stats = 1 }
        # Puppet regency gets 2x diarch stats bonus
        if = { limit = { has_diarchy_type = puppet_regency }
            set_variable = { name = tmp_add value = scope:diarch.diplomacy }
            change_variable = { name = tmp_add multiply = 2 }
        }
        else = {
            # Regular regency: use diarch stats as-is
            set_variable = { name = tmp_add value = scope:diarch.diplomacy }
        }
    }
    else = { set_variable = { name = tmp_add value = diplomacy } }
    change_variable = { name = tmp_add add = -10 }
    # Positive contributions (tmp_add > 1): stronger multiplier (x2)
    if = {
        limit = { var:tmp_add > 1 }
        set_variable = { name = tmp_stat_pos value = var:tmp_add }
        change_variable = { name = tmp_stat_pos multiply = 2 }
        clamp_variable = { name = tmp_stat_pos min = -10 max = 20 }
        set_variable = { name = tmp_stat_contrib value = var:tmp_stat_pos }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else_if = {
        limit = { var:tmp_add < -1 }
        # Convert to positive distance below 10
        set_variable = { name = tmp_neg value = var:tmp_add }
        change_variable = { name = tmp_neg multiply = -1 }
        # Piecewise stronger penalties for lower stats (store in tmp_stat_contrib)
        if = { limit = { var:tmp_neg >= 7 } set_variable = { name = tmp_stat_contrib value = -10 } }
        else_if = { limit = { var:tmp_neg >= 5 } set_variable = { name = tmp_stat_contrib value = -8 } }
        else_if = { limit = { var:tmp_neg >= 3 } set_variable = { name = tmp_stat_contrib value = -5 } }
        else = { set_variable = { name = tmp_stat_contrib value = -2 } }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else = {
        # within [-1,1] -> treat as zero (no contribution)
        set_variable = { name = tmp_stat_contrib value = 0 }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }

    # Martial
    if = { limit = { var:riseandfall_rs_use_diarch_stats = 1 }
        # Puppet regency gets 2x diarch stats bonus
        if = { limit = { has_diarchy_type = puppet_regency }
            set_variable = { name = tmp_add value = scope:diarch.martial }
            change_variable = { name = tmp_add multiply = 2 }
        }
        else = {
            # Regular regency: use diarch stats as-is
            set_variable = { name = tmp_add value = scope:diarch.martial }
        }
    }
    else = { set_variable = { name = tmp_add value = martial } }
    change_variable = { name = tmp_add add = -10 }
    if = {
        limit = { var:tmp_add > 1 }
        set_variable = { name = tmp_stat_pos value = var:tmp_add }
        change_variable = { name = tmp_stat_pos multiply = 2 }
        clamp_variable = { name = tmp_stat_pos min = -10 max = 20 }
        set_variable = { name = tmp_stat_contrib value = var:tmp_stat_pos }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else_if = {
        limit = { var:tmp_add < -1 }
        set_variable = { name = tmp_neg value = var:tmp_add }
        change_variable = { name = tmp_neg multiply = -1 }
        if = { limit = { var:tmp_neg >= 7 } set_variable = { name = tmp_stat_contrib value = -10 } }
        else_if = { limit = { var:tmp_neg >= 5 } set_variable = { name = tmp_stat_contrib value = -8 } }
        else_if = { limit = { var:tmp_neg >= 3 } set_variable = { name = tmp_stat_contrib value = -5 } }
        else = { set_variable = { name = tmp_stat_contrib value = -2 } }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else = {
        set_variable = { name = tmp_stat_contrib value = 0 }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }

    # Stewardship
    if = { limit = { var:riseandfall_rs_use_diarch_stats = 1 }
        # Puppet regency gets 2x diarch stats bonus
        if = { limit = { has_diarchy_type = puppet_regency }
            set_variable = { name = tmp_add value = scope:diarch.stewardship }
            change_variable = { name = tmp_add multiply = 2 }
        }
        else = {
            # Regular regency: use diarch stats as-is
            set_variable = { name = tmp_add value = scope:diarch.stewardship }
        }
    }
    else = { set_variable = { name = tmp_add value = stewardship } }
    change_variable = { name = tmp_add add = -10 }
    if = {
        limit = { var:tmp_add > 1 }
        set_variable = { name = tmp_stat_pos value = var:tmp_add }
        change_variable = { name = tmp_stat_pos multiply = 2 }
        clamp_variable = { name = tmp_stat_pos min = -10 max = 20 }
        set_variable = { name = tmp_stat_contrib value = var:tmp_stat_pos }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else_if = {
        limit = { var:tmp_add < -1 }
        set_variable = { name = tmp_neg value = var:tmp_add }
        change_variable = { name = tmp_neg multiply = -1 }
        if = { limit = { var:tmp_neg >= 7 } set_variable = { name = tmp_stat_contrib value = -10 } }
        else_if = { limit = { var:tmp_neg >= 5 } set_variable = { name = tmp_stat_contrib value = -8 } }
        else_if = { limit = { var:tmp_neg >= 3 } set_variable = { name = tmp_stat_contrib value = -5 } }
        else = { set_variable = { name = tmp_stat_contrib value = -2 } }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else = {
        set_variable = { name = tmp_stat_contrib value = 0 }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }

    # Intrigue
    if = { limit = { var:riseandfall_rs_use_diarch_stats = 1 }
        # Puppet regency gets 2x diarch stats bonus
        if = { limit = { has_diarchy_type = puppet_regency }
            set_variable = { name = tmp_add value = scope:diarch.intrigue }
            change_variable = { name = tmp_add multiply = 2 }
        }
        else = {
            # Regular regency: use diarch stats as-is
            set_variable = { name = tmp_add value = scope:diarch.intrigue }
        }
    }
    else = { set_variable = { name = tmp_add value = intrigue } }
    change_variable = { name = tmp_add add = -10 }
    if = {
        limit = { var:tmp_add > 1 }
        set_variable = { name = tmp_stat_pos value = var:tmp_add }
        change_variable = { name = tmp_stat_pos multiply = 2 }
        clamp_variable = { name = tmp_stat_pos min = -10 max = 20 }
        set_variable = { name = tmp_stat_contrib value = var:tmp_stat_pos }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else_if = {
        limit = { var:tmp_add < -1 }
        set_variable = { name = tmp_neg value = var:tmp_add }
        change_variable = { name = tmp_neg multiply = -1 }
        if = { limit = { var:tmp_neg >= 7 } set_variable = { name = tmp_stat_contrib value = -10 } }
        else_if = { limit = { var:tmp_neg >= 5 } set_variable = { name = tmp_stat_contrib value = -8 } }
        else_if = { limit = { var:tmp_neg >= 3 } set_variable = { name = tmp_stat_contrib value = -5 } }
        else = { set_variable = { name = tmp_stat_contrib value = -2 } }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else = {
        set_variable = { name = tmp_stat_contrib value = 0 }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }

    # Learning
    if = { limit = { var:riseandfall_rs_use_diarch_stats = 1 }
        # Puppet regency gets 2x diarch stats bonus
        if = { limit = { has_diarchy_type = puppet_regency }
            set_variable = { name = tmp_add value = scope:diarch.learning }
            change_variable = { name = tmp_add multiply = 2 }
        }
        else = {
            # Regular regency: use diarch stats as-is
            set_variable = { name = tmp_add value = scope:diarch.learning }
        }
    }
    else = { set_variable = { name = tmp_add value = learning } }
    change_variable = { name = tmp_add add = -10 }
    if = {
        limit = { var:tmp_add > 1 }
        set_variable = { name = tmp_stat_pos value = var:tmp_add }
        change_variable = { name = tmp_stat_pos multiply = 2 }
        clamp_variable = { name = tmp_stat_pos min = -10 max = 20 }
        set_variable = { name = tmp_stat_contrib value = var:tmp_stat_pos }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else_if = {
        limit = { var:tmp_add < -1 }
        set_variable = { name = tmp_neg value = var:tmp_add }
        change_variable = { name = tmp_neg multiply = -1 }
        if = { limit = { var:tmp_neg >= 7 } set_variable = { name = tmp_stat_contrib value = -10 } }
        else_if = { limit = { var:tmp_neg >= 5 } set_variable = { name = tmp_stat_contrib value = -8 } }
        else_if = { limit = { var:tmp_neg >= 3 } set_variable = { name = tmp_stat_contrib value = -5 } }
        else = { set_variable = { name = tmp_stat_contrib value = -2 } }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }
    else = {
        set_variable = { name = tmp_stat_contrib value = 0 }
        change_variable = { name = riseandfall_rs_stats_component add = var:tmp_stat_contrib }
    }

    # Clamp stats component to -50..+50 (sum of five per-stat ranges centered at 0)
    clamp_variable = { name = riseandfall_rs_stats_component min = -50 max = 50 }





    ########################################
    # 2) LEGITIMACY - manual lookup mapping
    # We no longer compute via linear arithmetic. Instead we assign explicit
    # component values per discrete legitimacy/piety/celestial/influence level.
    # Standard mapping for levels (0..5):
    #   0 -> -20
    #   1 -> -15
    #   2 -> -8
    #   3 -> 0
    #   4 -> 8
    #   5 -> 20
    set_variable = { name = riseandfall_rs_legitimacy_component value = 0 }

    # Theocracy uses piety_level (0..5) mapped via the same manual table
    if = {
        limit = { has_government = theocracy_government }
        set_variable = { name = tmp_piety_level value = piety_level }
        if = { limit = { var:tmp_piety_level = 0 } set_variable = { name = tmp_piety_mapped value = -20 } }
        else_if = { limit = { var:tmp_piety_level = 1 } set_variable = { name = tmp_piety_mapped value = -15 } }
        else_if = { limit = { var:tmp_piety_level = 2 } set_variable = { name = tmp_piety_mapped value = -8 } }
        else_if = { limit = { var:tmp_piety_level = 3 } set_variable = { name = tmp_piety_mapped value = 0 } }
        else_if = { limit = { var:tmp_piety_level = 4 } set_variable = { name = tmp_piety_mapped value = 8 } }
        else_if = { limit = { var:tmp_piety_level = 5 } set_variable = { name = tmp_piety_mapped value = 20 } }
        else = { set_variable = { name = tmp_piety_mapped value = 0 } }
        set_variable = { name = riseandfall_rs_legitimacy_component value = var:tmp_piety_mapped }
    }
    else = {
        # If the realm has a legitimacy mechanic, check for celestial vs standard
        if = {
            limit = { has_legitimacy = yes }
            if = {
                limit = { has_government = celestial_government }
                # Celestial uses 0..7. Apply manual mapping for 0..5 as above and
                # clamp higher levels to the max positive (20).
                set_variable = { name = tmp_cel value = legitimacy_level }
                if = { limit = { var:tmp_cel = 0 } set_variable = { name = tmp_cel_mapped value = -20 } }
                else_if = { limit = { var:tmp_cel = 1 } set_variable = { name = tmp_cel_mapped value = -15 } }
                else_if = { limit = { var:tmp_cel = 2 } set_variable = { name = tmp_cel_mapped value = -8 } }
                else_if = { limit = { var:tmp_cel = 3 } set_variable = { name = tmp_cel_mapped value = 0 } }
                else_if = { limit = { var:tmp_cel = 4 } set_variable = { name = tmp_cel_mapped value = 8 } }
                else_if = { limit = { var:tmp_cel = 5 } set_variable = { name = tmp_cel_mapped value = 20 } }
                else_if = { limit = { var:tmp_cel = 6 } set_variable = { name = tmp_cel_mapped value = 20 } }
                else_if = { limit = { var:tmp_cel = 7 } set_variable = { name = tmp_cel_mapped value = 20 } }
                else = { set_variable = { name = tmp_cel_mapped value = 0 } }
                set_variable = { name = riseandfall_rs_legitimacy_component value = var:tmp_cel_mapped }
            }
            else = {
                # Standard legitimacy_level 0..5 -> manual mapping
                set_variable = { name = tmp_leg value = legitimacy_level }
                if = { limit = { var:tmp_leg = 0 } set_variable = { name = tmp_leg_mapped value = -20 } }
                else_if = { limit = { var:tmp_leg = 1 } set_variable = { name = tmp_leg_mapped value = -15 } }
                else_if = { limit = { var:tmp_leg = 2 } set_variable = { name = tmp_leg_mapped value = -8 } }
                else_if = { limit = { var:tmp_leg = 3 } set_variable = { name = tmp_leg_mapped value = 0 } }
                else_if = { limit = { var:tmp_leg = 4 } set_variable = { name = tmp_leg_mapped value = 8 } }
                else_if = { limit = { var:tmp_leg = 5 } set_variable = { name = tmp_leg_mapped value = 20 } }
                else = { set_variable = { name = tmp_leg_mapped value = 0 } }
                set_variable = { name = riseandfall_rs_legitimacy_component value = var:tmp_leg_mapped }
            }
        }
        else = {
            # No legitimacy mechanic available; fall back to influence_level (0..6)
            # Map 0..5 per table and cap 6 to max positive.
            if = {
                limit = { influence_level >= 0 }
                set_variable = { name = tmp_inf value = influence_level }
                if = { limit = { var:tmp_inf = 0 } set_variable = { name = tmp_inf_mapped value = -20 } }
                else_if = { limit = { var:tmp_inf = 1 } set_variable = { name = tmp_inf_mapped value = -15 } }
                else_if = { limit = { var:tmp_inf = 2 } set_variable = { name = tmp_inf_mapped value = -8 } }
                else_if = { limit = { var:tmp_inf = 3 } set_variable = { name = tmp_inf_mapped value = 0 } }
                else_if = { limit = { var:tmp_inf = 4 } set_variable = { name = tmp_inf_mapped value = 8 } }
                else_if = { limit = { var:tmp_inf = 5 } set_variable = { name = tmp_inf_mapped value = 20 } }
                else_if = { limit = { var:tmp_inf = 6 } set_variable = { name = tmp_inf_mapped value = 20 } }
                else = { set_variable = { name = tmp_inf_mapped value = 0 } }
                set_variable = { name = riseandfall_rs_legitimacy_component value = var:tmp_inf_mapped }
            }
        }
    }

    ########################################
    # 2.5) REALM LAW (0..20)
    # Map authority law levels to a small stability bonus exposed in the tooltip
    # Check the scoped character's authority level for different government types
    set_variable = { name = riseandfall_rs_realm_law_component value = 0 }
    # Check crown authority (feudal)
    if = {
        limit = { has_realm_law = crown_authority_3 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 15 }
    }
    else_if = {
        limit = { has_realm_law = crown_authority_2 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 10 }
    }
    else_if = {
        limit = { has_realm_law = crown_authority_1 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 5 }
    }
    # Check tribal authority
    else_if = {
        limit = { has_realm_law = tribal_authority_3 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 15 }
    }
    else_if = {
        limit = { has_realm_law = tribal_authority_2 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 10 }
    }
    else_if = {
        limit = { has_realm_law = tribal_authority_1 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 5 }
    }
    # Check imperial bureaucracy
    else_if = {
        limit = { has_realm_law = imperial_bureaucracy_3 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 15 }
    }
    else_if = {
        limit = { has_realm_law = imperial_bureaucracy_2 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 10 }
    }
    else_if = {
        limit = { has_realm_law = imperial_bureaucracy_1 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 5 }
    }
    # Check nomadic authority (has 5 levels, so scale to 20 max)
    else_if = {
        limit = { has_realm_law = nomadic_authority_5 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 20 }
    }
    else_if = {
        limit = { has_realm_law = nomadic_authority_4 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 15 }
    }
    else_if = {
        limit = { has_realm_law = nomadic_authority_3 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 10 }
    }
    else_if = {
        limit = { has_realm_law = nomadic_authority_2 }
        set_variable = { name = riseandfall_rs_realm_law_component value = 5 }
    }
    else = { set_variable = { name = riseandfall_rs_realm_law_component value = 0 } }
    # Expose the chosen authority bonus for the tooltip
    set_variable = { name = riseandfall_realm_stability_realm_law_bonus value = var:riseandfall_rs_realm_law_component }

    ########################################
    # 3) VASSAL RELATIONS (-30..+30)
    # Now we compute the average vassal opinion including negatives, map -100..+100 -> -30..+30
    set_variable = { name = riseandfall_rs_vassals_component value = 0 }
    # Prepare accumulators - count vassals we actually process and sum their opinions (including negatives)
    set_variable = { name = tmp_vassal_count value = 0 }
    set_variable = { name = tmp_opinion_sum value = 0 }

    # Save ruler scope first so vassals can modify the ruler's variables
    save_scope_as = ruler

    every_vassal = {
        # For each vassal: save their opinion of the liege and add to the running sum.
        # Powerful vassals count double (both in numerator and denominator) so their
        # opinion has greater weight.
        if = {
            limit = { save_temporary_opinion_value_as = { name = tmp_vassal_opinion target = liege } }
            # If this vassal is powerful, add opinion twice and increment count by 2
            if = {
                limit = { is_powerful_vassal = yes }
                # prepare doubled opinion in a tmp variable in vassal scope
                # powerful vassal: count twice and add their opinion twice to the sum
                scope:ruler = { change_variable = { name = tmp_vassal_count add = 2 } }
                scope:ruler = { change_variable = { name = tmp_opinion_sum add = scope:tmp_vassal_opinion } }
                scope:ruler = { change_variable = { name = tmp_opinion_sum add = scope:tmp_vassal_opinion } }
            }
            else = {
                # Normal vassal: add opinion once and increment count by 1
                scope:ruler = { change_variable = { name = tmp_vassal_count add = 1 } }
                scope:ruler = { change_variable = { name = tmp_opinion_sum add = scope:tmp_vassal_opinion } }
            }
        }
    }

    # Compute average (if there are vassals) and map to -30..+30
    set_variable = { name = tmp_avg_opinion value = 0 }
    if = {
        limit = { var:tmp_vassal_count > 0 }
        set_variable = { name = tmp_avg_opinion value = var:tmp_opinion_sum }
        change_variable = { name = tmp_avg_opinion divide = var:tmp_vassal_count }
    }
    else = {
        # No vassals -> neutral opinion
        set_variable = { name = tmp_avg_opinion value = 0 }
    }

    # Map -100..+100 to -50..+50 by dividing by 2 (half the opinion)
    # This makes an average opinion of -68 -> -34, +80 -> +40
    change_variable = { name = tmp_avg_opinion divide = 2 }
    set_variable = { name = riseandfall_rs_vassals_component value = var:tmp_avg_opinion }

    clamp_variable = { name = riseandfall_rs_vassals_component min = -50 max = 50 }

    ########################################
    # 3.6) PUPPET REGENCY TRACKING
    # Track years under puppet regency (used for decay calculation later)
    if = { limit = { NOT = { has_variable = riseandfall_puppet_regency_years } } set_variable = { name = riseandfall_puppet_regency_years value = 0 } }
    if = { limit = { has_diarchy_type = puppet_regency } change_variable = { name = riseandfall_puppet_regency_years add = 1 } }
    else = { if = { limit = { var:riseandfall_puppet_regency_years > 0 } change_variable = { name = riseandfall_puppet_regency_years add = -1 } } }
    
    # Initialize puppet regency multiplier for tooltip (no penalty applied here)
    set_variable = { name = riseandfall_realm_stability_puppet_regency_multiplier value = 100 }
    # Ensure tooltip years variable exists for localization display
    if = { limit = { has_variable = riseandfall_puppet_regency_years } set_variable = { name = riseandfall_realm_stability_puppet_regency_years_tooltip value = var:riseandfall_puppet_regency_years } }
    else = { set_variable = { name = riseandfall_realm_stability_puppet_regency_years_tooltip value = 0 } }

    ########################################
    # 4) Sum components into final 0..100 TARGET score (don't overwrite the persistent current score yet)
    # Ensure component vars exist (safe defaults) to avoid unset-variable engine errors
    if = { limit = { NOT = { has_variable = riseandfall_rs_stats_component } } set_variable = { name = riseandfall_rs_stats_component value = 0 } }
    if = { limit = { NOT = { has_variable = riseandfall_rs_legitimacy_component } } set_variable = { name = riseandfall_rs_legitimacy_component value = 0 } }
    if = { limit = { NOT = { has_variable = riseandfall_rs_vassals_component } } set_variable = { name = riseandfall_rs_vassals_component value = 0 } }
    if = { limit = { NOT = { has_variable = riseandfall_rs_realm_law_component } } set_variable = { name = riseandfall_rs_realm_law_component value = 0 } }
    if = { limit = { NOT = { has_variable = riseandfall_rs_popular_opinion_component } } set_variable = { name = riseandfall_rs_popular_opinion_component value = 0 } }
    # Start from 50 as the equilibrium midpoint; components shift toward 0 or 100
    set_variable = { name = tmp_target_score value = 50 }
    change_variable = { name = tmp_target_score add = var:riseandfall_rs_stats_component }
    change_variable = { name = tmp_target_score add = var:riseandfall_rs_legitimacy_component }
    change_variable = { name = tmp_target_score add = var:riseandfall_rs_vassals_component }
    # Add realm law component (0..20)
    change_variable = { name = tmp_target_score add = var:riseandfall_rs_realm_law_component }


    # Puppet regency multiplier is now applied during per-stat calculation (section 1).
    # Keep the tooltip variable intact but do not apply an additional multiplier here.

    # Apply puppet regency linear multiplier to the TARGET score: 2% per year (linear)
    # e.g., 5 years -> 100 - 2*5 = 90% (tmp_target_score * 0.90)
    if = {
        limit = { has_variable = riseandfall_puppet_regency_years }
        set_variable = { name = tmp_pr_years value = var:riseandfall_puppet_regency_years }
        # tmp_pr_years = -2 * years (we'll add this to 100)
        change_variable = { name = tmp_pr_years multiply = -2 }
        set_variable = { name = tmp_pr_mult_pct value = 100 }
        change_variable = { name = tmp_pr_mult_pct add = var:tmp_pr_years }
        # Prevent negative multiplier
        clamp_variable = { name = tmp_pr_mult_pct min = 0 max = 100 }
    # Expose for tooltip (percent) — store the computed percent in the persistent var
    set_variable = { name = riseandfall_realm_stability_puppet_regency_multiplier value = var:tmp_pr_mult_pct }
    # Apply percent multiplier to target score using the persistent tooltip variable
    change_variable = { name = tmp_target_score multiply = var:riseandfall_realm_stability_puppet_regency_multiplier }
    change_variable = { name = tmp_target_score divide = 100 }
    }
    else = {
        if = { limit = { NOT = { has_variable = riseandfall_realm_stability_puppet_regency_multiplier } } set_variable = { name = riseandfall_realm_stability_puppet_regency_multiplier value = 100 } }
    }

    # Civil war adjustment applied to the TARGET score (so smoothing moves current toward
    # the penalized target) instead of modifying the persistent current score directly.
    # Ensure counter exists
    if = { limit = { NOT = { has_variable = riseandfall_rs_civil_war_years } } set_variable = { name = riseandfall_rs_civil_war_years value = 0 } }
    # Ensure sex-law penalty tooltip var exists
    if = { limit = { NOT = { has_variable = riseandfall_realm_stability_sex_law_penalty } } set_variable = { name = riseandfall_realm_stability_sex_law_penalty value = 0 } }
    # Ensure realm-law (crown authority) tooltip var exists
    if = { limit = { NOT = { has_variable = riseandfall_realm_stability_realm_law_bonus } } set_variable = { name = riseandfall_realm_stability_realm_law_bonus value = 0 } }

    if = {
        limit = { is_independent_ruler = yes }
        # Increment or decay the consecutive-years counter depending on whether the ruler
        # is in a civil war this tick. This ensures the TARGET reflects the new year state.
        if = { limit = { is_in_civil_war = yes } change_variable = { name = riseandfall_rs_civil_war_years add = 1 } }
        else = { if = { limit = { var:riseandfall_rs_civil_war_years > 0 } change_variable = { name = riseandfall_rs_civil_war_years add = -1 } } }

    # Compute cumulative penalty (years * -5), cap it at a minimum of -25, and subtract from tmp_target_score
    set_variable = { name = tmp_cw_total value = var:riseandfall_rs_civil_war_years }
    change_variable = { name = tmp_cw_total multiply = -3 }
    # Cap the civil war penalty so it never goes below -50
    clamp_variable = { name = tmp_cw_total min = -50 max = 0 }
    change_variable = { name = tmp_target_score add = var:tmp_cw_total }
    # store the displayed cumulative penalty for the tooltip
    set_variable = { name = riseandfall_realm_stability_civil_war_penalty value = var:tmp_cw_total }

        # Sex vs realm-law penalty: if the ruler's sex conflicts with realm succession laws,
        # apply a -10 penalty to the TARGET score and expose it for the tooltip.
        # Female ruler in male-only/preference law
        set_variable = { name = tmp_sex_penalty value = 0 }
        if = {
            limit = { is_female = yes has_realm_law = male_only_law }
            set_variable = { name = tmp_sex_penalty value = -10 }
        }
        else_if = {
            limit = { is_female = yes has_realm_law = male_preference_law }
            set_variable = { name = tmp_sex_penalty value = -10 }
        }
        # Male ruler in female-only/preference law
        else_if = {
            limit = { is_male = yes has_realm_law = female_only_law }
            set_variable = { name = tmp_sex_penalty value = -10 }
        }
        else_if = {
            limit = { is_male = yes has_realm_law = female_preference_law }
            set_variable = { name = tmp_sex_penalty value = -10 }
        }

        # Apply sex penalty to target and store for tooltip
        change_variable = { name = tmp_target_score add = var:tmp_sex_penalty }
        set_variable = { name = riseandfall_realm_stability_sex_law_penalty value = var:tmp_sex_penalty }


    }

    # WAR MULTIPLIER (wins/losses change a persistent multiplier)
    # We maintain a per-character multiplier (percent) that modifies the computed
    # TARGET score multiplicatively. Winning a war multiplies by 110/100 (+10%),
    # losing a war multiplies by 90/100 (-10%). This multiplier is persistent and
    # applied to the tmp_target_score here. By default it is 100 (no change).
    if = { limit = { NOT = { has_variable = riseandfall_realm_stability_war_multiplier } } set_variable = { name = riseandfall_realm_stability_war_multiplier value = 100 } }
    if = { limit = { NOT = { has_variable = riseandfall_realm_stability_puppet_regency_multiplier } } set_variable = { name = riseandfall_realm_stability_puppet_regency_multiplier value = 100 } }
    # Apply the multiplier to the target score (percent math)
    change_variable = { name = tmp_target_score multiply = var:riseandfall_realm_stability_war_multiplier }
    change_variable = { name = tmp_target_score divide = 100 }
    # Store the multiplier back to itself to expose for the tooltip (no-op assignment)
    set_variable = { name = riseandfall_realm_stability_war_multiplier value = var:riseandfall_realm_stability_war_multiplier }

# Ensure the target stays within 0..100 after applying war penalties
clamp_variable = { name = tmp_target_score min = 0 max = 100 }
round_variable = { name = tmp_target_score }    # Persist the (possibly penalized) target so smoothing moves the current score toward it
    set_variable = { name = riseandfall_realm_stability_target value = var:tmp_target_score }

    # Smooth the persistent current score (`riseandfall_realm_stability_score`) toward the target
    # by +/-1 per year. We assume this scripted_effect runs monthly; use an integer month
    # counter `riseandfall_rs_adjust_months` to apply one step every 12 runs.

    # Initialize months counter if missing
    if = {
        limit = { NOT = { has_variable = riseandfall_rs_adjust_months } }
        set_variable = { name = riseandfall_rs_adjust_months value = 0 }
    }
    # If the persistent current score doesn't exist yet, initialize it to the computed TARGET
    # (baseline 50 + component offsets). This avoids inheriting stale title-stored values
    # that could make newly-loaded rulers start with an unexpectedly low stability.
    if = {
        limit = { NOT = { has_variable = riseandfall_realm_stability_score } }
        set_variable = { name = riseandfall_realm_stability_score value = var:riseandfall_realm_stability_target }
    }
    else = {
        # increment month counter each run
        change_variable = { name = riseandfall_rs_adjust_months add = 1 }
        # only apply an adjustment when we've accumulated the configured period.
        # This mod schedules the on_action yearly, so check for >= 1 run (one year).
        if = {
            limit = { var:riseandfall_rs_adjust_months >= 1 }
            # reset months counter so we apply at most one adjustment now
            set_variable = { name = riseandfall_rs_adjust_months value = 0 }
            # Move current score toward target by a distance-scaled step so it reaches the target
            # within at most 5 runs (years). Compute step = ceil(abs(delta) / 5), min 1.
            # compute delta = target - current
            set_variable = { name = tmp_rs_delta value = var:riseandfall_realm_stability_target }
            set_variable = { name = tmp_rs_current value = var:riseandfall_realm_stability_score }
            change_variable = { name = tmp_rs_current multiply = -1 }
            change_variable = { name = tmp_rs_delta add = var:tmp_rs_current }

            # Compute absolute delta into tmp_rs_delta_abs
            if = {
                limit = { var:tmp_rs_delta >= 0 }
                set_variable = { name = tmp_rs_delta_abs value = var:tmp_rs_delta }
            }
            else = {
                set_variable = { name = tmp_rs_delta_abs value = var:tmp_rs_delta }
                change_variable = { name = tmp_rs_delta_abs multiply = -1 }
            }

            # step = ceil(tmp_rs_delta_abs / 5) implemented as integer: (abs + 4) / 5
            set_variable = { name = tmp_rs_step_numer value = var:tmp_rs_delta_abs }
            change_variable = { name = tmp_rs_step_numer add = 4 }
            set_variable = { name = tmp_rs_step value = var:tmp_rs_step_numer }
            change_variable = { name = tmp_rs_step divide = 5 }

            # Ensure at least 1 when there is a non-zero delta
            if = {
                limit = { var:tmp_rs_step < 1 }
                if = { limit = { var:tmp_rs_delta_abs > 0 } set_variable = { name = tmp_rs_step value = 1 } }
            }

            # Apply the step toward the target (respect sign of delta)
            if = {
                limit = { var:tmp_rs_delta > 0 }
                change_variable = { name = riseandfall_realm_stability_score add = var:tmp_rs_step }
                # Store predicted positive change for UI
                set_variable = { name = riseandfall_realm_stability_predicted_change value = var:tmp_rs_step }
            }
            else = {
                # negative delta -> subtract step
                set_variable = { name = tmp_rs_step_neg value = var:tmp_rs_step }
                change_variable = { name = tmp_rs_step_neg multiply = -1 }
                change_variable = { name = riseandfall_realm_stability_score add = var:tmp_rs_step_neg }
                # Store predicted negative change for UI
                set_variable = { name = riseandfall_realm_stability_predicted_change value = var:tmp_rs_step_neg }
            }
            # Use the predicted change variable in-script (clamp/round) so the engine treats it as used
            clamp_variable = { name = riseandfall_realm_stability_predicted_change min = -100 max = 100 }
            round_variable = { name = riseandfall_realm_stability_predicted_change }
            # Puppet regency: simplified — only tooltip tracking, no automatic decay applied here
        }
    }

    # Ensure current score remains clamped and integer
    clamp_variable = { name = riseandfall_realm_stability_score min = 0 max = 100 }
    round_variable = { name = riseandfall_realm_stability_score }
    

    ########################################
    # Civil war penalty is applied to the TARGET now; we do not modify the persistent
    # current score here. Ensure the tooltip variable exists.
    if = { limit = { NOT = { has_variable = riseandfall_realm_stability_civil_war_penalty } } set_variable = { name = riseandfall_realm_stability_civil_war_penalty value = 0 } }

    

    # Clamp and round the persistent current score (unchanged by civil-war target adjustments here)
    clamp_variable = { name = riseandfall_realm_stability_score min = 0 max = 100 }
    round_variable = { name = riseandfall_realm_stability_score }




    # Remove any previously-applied fine-grained stability modifiers (1..100)
    remove_character_modifier = riseandfall_stability_0
    remove_character_modifier = riseandfall_stability_1
    remove_character_modifier = riseandfall_stability_2
    remove_character_modifier = riseandfall_stability_3
    remove_character_modifier = riseandfall_stability_4
    remove_character_modifier = riseandfall_stability_5
    remove_character_modifier = riseandfall_stability_6
    remove_character_modifier = riseandfall_stability_7
    remove_character_modifier = riseandfall_stability_8
    remove_character_modifier = riseandfall_stability_9
    remove_character_modifier = riseandfall_stability_10
    remove_character_modifier = riseandfall_stability_11
    remove_character_modifier = riseandfall_stability_12
    remove_character_modifier = riseandfall_stability_13
    remove_character_modifier = riseandfall_stability_14
    remove_character_modifier = riseandfall_stability_15
    remove_character_modifier = riseandfall_stability_16
    remove_character_modifier = riseandfall_stability_17
    remove_character_modifier = riseandfall_stability_18
    remove_character_modifier = riseandfall_stability_19
    remove_character_modifier = riseandfall_stability_20
    remove_character_modifier = riseandfall_stability_21
    remove_character_modifier = riseandfall_stability_22
    remove_character_modifier = riseandfall_stability_23
    remove_character_modifier = riseandfall_stability_24
    remove_character_modifier = riseandfall_stability_25
    remove_character_modifier = riseandfall_stability_26
    remove_character_modifier = riseandfall_stability_27
    remove_character_modifier = riseandfall_stability_28
    remove_character_modifier = riseandfall_stability_29
    remove_character_modifier = riseandfall_stability_30
    remove_character_modifier = riseandfall_stability_31
    remove_character_modifier = riseandfall_stability_32
    remove_character_modifier = riseandfall_stability_33
    remove_character_modifier = riseandfall_stability_34
    remove_character_modifier = riseandfall_stability_35
    remove_character_modifier = riseandfall_stability_36
    remove_character_modifier = riseandfall_stability_37
    remove_character_modifier = riseandfall_stability_38
    remove_character_modifier = riseandfall_stability_39
    remove_character_modifier = riseandfall_stability_40
    remove_character_modifier = riseandfall_stability_41
    remove_character_modifier = riseandfall_stability_42
    remove_character_modifier = riseandfall_stability_43
    remove_character_modifier = riseandfall_stability_44
    remove_character_modifier = riseandfall_stability_45
    remove_character_modifier = riseandfall_stability_46
    remove_character_modifier = riseandfall_stability_47
    remove_character_modifier = riseandfall_stability_48
    remove_character_modifier = riseandfall_stability_49
    remove_character_modifier = riseandfall_stability_50
    remove_character_modifier = riseandfall_stability_51
    remove_character_modifier = riseandfall_stability_52
    remove_character_modifier = riseandfall_stability_53
    remove_character_modifier = riseandfall_stability_54
    remove_character_modifier = riseandfall_stability_55
    remove_character_modifier = riseandfall_stability_56
    remove_character_modifier = riseandfall_stability_57
    remove_character_modifier = riseandfall_stability_58
    remove_character_modifier = riseandfall_stability_59
    remove_character_modifier = riseandfall_stability_60
    remove_character_modifier = riseandfall_stability_61
    remove_character_modifier = riseandfall_stability_62
    remove_character_modifier = riseandfall_stability_63
    remove_character_modifier = riseandfall_stability_64
    remove_character_modifier = riseandfall_stability_65
    remove_character_modifier = riseandfall_stability_66
    remove_character_modifier = riseandfall_stability_67
    remove_character_modifier = riseandfall_stability_68
    remove_character_modifier = riseandfall_stability_69
    remove_character_modifier = riseandfall_stability_70
    remove_character_modifier = riseandfall_stability_71
    remove_character_modifier = riseandfall_stability_72
    remove_character_modifier = riseandfall_stability_73
    remove_character_modifier = riseandfall_stability_74
    remove_character_modifier = riseandfall_stability_75
    remove_character_modifier = riseandfall_stability_76
    remove_character_modifier = riseandfall_stability_77
    remove_character_modifier = riseandfall_stability_78
    remove_character_modifier = riseandfall_stability_79
    remove_character_modifier = riseandfall_stability_80
    remove_character_modifier = riseandfall_stability_81
    remove_character_modifier = riseandfall_stability_82
    remove_character_modifier = riseandfall_stability_83
    remove_character_modifier = riseandfall_stability_84
    remove_character_modifier = riseandfall_stability_85
    remove_character_modifier = riseandfall_stability_86
    remove_character_modifier = riseandfall_stability_87
    remove_character_modifier = riseandfall_stability_88
    remove_character_modifier = riseandfall_stability_89
    remove_character_modifier = riseandfall_stability_90
    remove_character_modifier = riseandfall_stability_91
    remove_character_modifier = riseandfall_stability_92
    remove_character_modifier = riseandfall_stability_93
    remove_character_modifier = riseandfall_stability_94
    remove_character_modifier = riseandfall_stability_95
    remove_character_modifier = riseandfall_stability_96
    remove_character_modifier = riseandfall_stability_97
    remove_character_modifier = riseandfall_stability_98
    remove_character_modifier = riseandfall_stability_99
    remove_character_modifier = riseandfall_stability_100

    # Choose and add exactly one fine-grained modifier based on CURRENT score (0..100)
    # Map score N -> riseandfall_stability_N, with 0 mapped to 1 since modifiers are 1..100
    if = { limit = { var:riseandfall_realm_stability_score = 0 } add_character_modifier = { modifier = riseandfall_stability_0 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 1 } add_character_modifier = { modifier = riseandfall_stability_1 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 2 } add_character_modifier = { modifier = riseandfall_stability_2 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 3 } add_character_modifier = { modifier = riseandfall_stability_3 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 4 } add_character_modifier = { modifier = riseandfall_stability_4 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 5 } add_character_modifier = { modifier = riseandfall_stability_5 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 6 } add_character_modifier = { modifier = riseandfall_stability_6 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 7 } add_character_modifier = { modifier = riseandfall_stability_7 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 8 } add_character_modifier = { modifier = riseandfall_stability_8 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 9 } add_character_modifier = { modifier = riseandfall_stability_9 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 10 } add_character_modifier = { modifier = riseandfall_stability_10 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 11 } add_character_modifier = { modifier = riseandfall_stability_11 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 12 } add_character_modifier = { modifier = riseandfall_stability_12 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 13 } add_character_modifier = { modifier = riseandfall_stability_13 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 14 } add_character_modifier = { modifier = riseandfall_stability_14 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 15 } add_character_modifier = { modifier = riseandfall_stability_15 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 16 } add_character_modifier = { modifier = riseandfall_stability_16 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 17 } add_character_modifier = { modifier = riseandfall_stability_17 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 18 } add_character_modifier = { modifier = riseandfall_stability_18 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 19 } add_character_modifier = { modifier = riseandfall_stability_19 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 20 } add_character_modifier = { modifier = riseandfall_stability_20 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 21 } add_character_modifier = { modifier = riseandfall_stability_21 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 22 } add_character_modifier = { modifier = riseandfall_stability_22 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 23 } add_character_modifier = { modifier = riseandfall_stability_23 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 24 } add_character_modifier = { modifier = riseandfall_stability_24 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 25 } add_character_modifier = { modifier = riseandfall_stability_25 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 26 } add_character_modifier = { modifier = riseandfall_stability_26 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 27 } add_character_modifier = { modifier = riseandfall_stability_27 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 28 } add_character_modifier = { modifier = riseandfall_stability_28 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 29 } add_character_modifier = { modifier = riseandfall_stability_29 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 30 } add_character_modifier = { modifier = riseandfall_stability_30 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 31 } add_character_modifier = { modifier = riseandfall_stability_31 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 32 } add_character_modifier = { modifier = riseandfall_stability_32 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 33 } add_character_modifier = { modifier = riseandfall_stability_33 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 34 } add_character_modifier = { modifier = riseandfall_stability_34 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 35 } add_character_modifier = { modifier = riseandfall_stability_35 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 36 } add_character_modifier = { modifier = riseandfall_stability_36 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 37 } add_character_modifier = { modifier = riseandfall_stability_37 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 38 } add_character_modifier = { modifier = riseandfall_stability_38 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 39 } add_character_modifier = { modifier = riseandfall_stability_39 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 40 } add_character_modifier = { modifier = riseandfall_stability_40 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 41 } add_character_modifier = { modifier = riseandfall_stability_41 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 42 } add_character_modifier = { modifier = riseandfall_stability_42 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 43 } add_character_modifier = { modifier = riseandfall_stability_43 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 44 } add_character_modifier = { modifier = riseandfall_stability_44 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 45 } add_character_modifier = { modifier = riseandfall_stability_45 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 46 } add_character_modifier = { modifier = riseandfall_stability_46 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 47 } add_character_modifier = { modifier = riseandfall_stability_47 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 48 } add_character_modifier = { modifier = riseandfall_stability_48 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 49 } add_character_modifier = { modifier = riseandfall_stability_49 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 50 } add_character_modifier = { modifier = riseandfall_stability_50 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 51 } add_character_modifier = { modifier = riseandfall_stability_51 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 52 } add_character_modifier = { modifier = riseandfall_stability_52 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 53 } add_character_modifier = { modifier = riseandfall_stability_53 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 54 } add_character_modifier = { modifier = riseandfall_stability_54 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 55 } add_character_modifier = { modifier = riseandfall_stability_55 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 56 } add_character_modifier = { modifier = riseandfall_stability_56 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 57 } add_character_modifier = { modifier = riseandfall_stability_57 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 58 } add_character_modifier = { modifier = riseandfall_stability_58 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 59 } add_character_modifier = { modifier = riseandfall_stability_59 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 60 } add_character_modifier = { modifier = riseandfall_stability_60 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 61 } add_character_modifier = { modifier = riseandfall_stability_61 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 62 } add_character_modifier = { modifier = riseandfall_stability_62 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 63 } add_character_modifier = { modifier = riseandfall_stability_63 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 64 } add_character_modifier = { modifier = riseandfall_stability_64 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 65 } add_character_modifier = { modifier = riseandfall_stability_65 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 66 } add_character_modifier = { modifier = riseandfall_stability_66 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 67 } add_character_modifier = { modifier = riseandfall_stability_67 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 68 } add_character_modifier = { modifier = riseandfall_stability_68 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 69 } add_character_modifier = { modifier = riseandfall_stability_69 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 70 } add_character_modifier = { modifier = riseandfall_stability_70 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 71 } add_character_modifier = { modifier = riseandfall_stability_71 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 72 } add_character_modifier = { modifier = riseandfall_stability_72 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 73 } add_character_modifier = { modifier = riseandfall_stability_73 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 74 } add_character_modifier = { modifier = riseandfall_stability_74 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 75 } add_character_modifier = { modifier = riseandfall_stability_75 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 76 } add_character_modifier = { modifier = riseandfall_stability_76 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 77 } add_character_modifier = { modifier = riseandfall_stability_77 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 78 } add_character_modifier = { modifier = riseandfall_stability_78 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 79 } add_character_modifier = { modifier = riseandfall_stability_79 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 80 } add_character_modifier = { modifier = riseandfall_stability_80 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 81 } add_character_modifier = { modifier = riseandfall_stability_81 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 82 } add_character_modifier = { modifier = riseandfall_stability_82 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 83 } add_character_modifier = { modifier = riseandfall_stability_83 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 84 } add_character_modifier = { modifier = riseandfall_stability_84 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 85 } add_character_modifier = { modifier = riseandfall_stability_85 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 86 } add_character_modifier = { modifier = riseandfall_stability_86 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 87 } add_character_modifier = { modifier = riseandfall_stability_87 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 88 } add_character_modifier = { modifier = riseandfall_stability_88 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 89 } add_character_modifier = { modifier = riseandfall_stability_89 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 90 } add_character_modifier = { modifier = riseandfall_stability_90 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 91 } add_character_modifier = { modifier = riseandfall_stability_91 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 92 } add_character_modifier = { modifier = riseandfall_stability_92 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 93 } add_character_modifier = { modifier = riseandfall_stability_93 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 94 } add_character_modifier = { modifier = riseandfall_stability_94 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 95 } add_character_modifier = { modifier = riseandfall_stability_95 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 96 } add_character_modifier = { modifier = riseandfall_stability_96 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 97 } add_character_modifier = { modifier = riseandfall_stability_97 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 98 } add_character_modifier = { modifier = riseandfall_stability_98 } }
    else_if = { limit = { var:riseandfall_realm_stability_score = 99 } add_character_modifier = { modifier = riseandfall_stability_99 } }
    else = { add_character_modifier = { modifier = riseandfall_stability_100 } }

}


# Called on the war winner scope (character) to increase the war multiplier by +10%
riseandfall_war_victory_se = {
    if = { limit = { NOT = { has_variable = riseandfall_realm_stability_war_multiplier } } set_variable = { name = riseandfall_realm_stability_war_multiplier value = 100 } }
    # Defensive: if a war scope exists and it's a peasant war, don't apply victory multiplier.
    if = {
        limit = { scope:war = { using_cb = peasant_war } }
        # do nothing for peasant wars
    }
    else = {
        # Increase by +10 percentage points (additive)
        change_variable = { name = riseandfall_realm_stability_war_multiplier add = 10 }
        # Clamp bounds so the multiplier cannot exceed 100% and can drop to 0% (0..100)
        if = { limit = { var:riseandfall_realm_stability_war_multiplier < 0 } set_variable = { name = riseandfall_realm_stability_war_multiplier value = 0 } }
        if = { limit = { var:riseandfall_realm_stability_war_multiplier > 100 } set_variable = { name = riseandfall_realm_stability_war_multiplier value = 100 } }
        # Expose for tooltip
        set_variable = { name = riseandfall_realm_stability_war_multiplier value = var:riseandfall_realm_stability_war_multiplier }
    }
}

# Called on the war loser scope (character) to decrease the war multiplier by -10%
riseandfall_war_loss_se = {
    if = { limit = { NOT = { has_variable = riseandfall_realm_stability_war_multiplier } } set_variable = { name = riseandfall_realm_stability_war_multiplier value = 100 } }
    # Defensive: if a war scope exists and it's a peasant war, don't apply loss multiplier here
    if = {
        limit = { scope:war = { using_cb = peasant_war } }
        # do nothing for peasant wars
    }
    else = {
        # Decrease by -10 percentage points (additive)
        change_variable = { name = riseandfall_realm_stability_war_multiplier add = -10 }
        # Clamp bounds so the multiplier cannot exceed 100% and can drop to 0% (0..100)
        if = { limit = { var:riseandfall_realm_stability_war_multiplier < 0 } set_variable = { name = riseandfall_realm_stability_war_multiplier value = 0 } }
        if = { limit = { var:riseandfall_realm_stability_war_multiplier > 100 } set_variable = { name = riseandfall_realm_stability_war_multiplier value = 100 } }
        set_variable = { name = riseandfall_realm_stability_war_multiplier value = var:riseandfall_realm_stability_war_multiplier }
    }
}
