# On_actions for the Realm Stability mechanic
# This file isolates the realm stability on_action so it can be enabled, disabled,
# or scheduled independently from adventurer logic.

yearly_global_pulse = {
    on_actions = {
        riseandfall_yearly_realm_stability
    }
}

on_game_start_after_lobby = {
    on_actions = {
        riseandfall_yearly_realm_stability
    }
}

on_war_won_attacker = {
    on_actions = {
        riseandfall_war_won_attacker
    }
}

on_war_won_defender = {
    on_actions = {
        riseandfall_war_won_defender
    }
}

# React to character death: transfer stability score from predecessor to heir
on_death = {
    on_actions = {
        riseandfall_on_death_stability_inheritance
    }
}

# React to characters gaining titles by inheritance so newly-inherited rulers
# get a computed realm stability value instead of the engine defaulting them to 100.
on_title_gain_inheritance = {
    on_actions = {
        riseandfall_on_title_gain_inheritance
    }
}

on_title_gain = {
    on_actions = {
        riseandfall_on_title_gain_inheritance
    }
}

riseandfall_on_death_stability_inheritance = {
    # Expected scope: character (who is dying)
    # Root scope: the dying character
    # Available: scope:killer (if killed), player_heir (if exists), primary_heir (if exists)
    trigger = {
        has_game_rule = riseandfall_realm_stability_enabled
        is_ruler = yes
        has_variable = riseandfall_realm_stability_score
    }
    effect = {
    # Save the dying character as the predecessor for heir to reference
        save_scope_as = predecessor
        # If a primary heir exists, transfer stability to them
        if = {
            limit = {
                exists = primary_heir
                primary_heir = { is_alive = yes }
            }
            # Only transfer stability to the primary heir if the heir is strictly LOWER
            # ranked than the predecessor (we disallow same-tier inheritance as well).
            # The game's tier constants map higher numbers -> higher ranks
            # (see common/script_values/00_title_tiers_values.txt: tier_county=2 ... tier_empire=5).
            # Prevent inheritance when the heir's highest_held_title_tier is greater-or-equal
            # to the predecessor's highest_held_title_tier. Allow only when heir < predecessor.
            primary_heir = {
                if = {
                    limit = {
                        OR = {
                            scope:predecessor = { is_landed = no }
                            highest_held_title_tier < scope:predecessor.highest_held_title_tier
                        }
                    }
                    riseandfall_inherit_stability_score_se = yes
                }
            }
        }
        # Also check player_heir if different from primary_heir
        else_if = {
            limit = {
                exists = player_heir
                player_heir = { is_alive = yes }
                player_heir != primary_heir
            }
            # Same guard for player_heir
            player_heir = {
                if = {
                    limit = {
                        OR = {
                            scope:predecessor = { is_landed = no }
                            highest_held_title_tier < scope:predecessor.highest_held_title_tier
                        }
                    }
                    riseandfall_inherit_stability_score_se = yes
                }
            }
        }
    }
}

riseandfall_on_title_gain_inheritance = {
    # Expected scope: character (the inheritor)
    # Available only in on_title_gain_inheritance event: scope:previous_holder and scope:title
    # NOT available in other contexts
    trigger = {
        has_game_rule = riseandfall_realm_stability_enabled
    }
    effect = {
        # When a landed character inherits a title and doesn't have a stability score yet,
        # check if the previous holder had one and inherit it.
        # This handles title-by-title transfers (e.g., primary title vs vassal titles)
        # IMPORTANT: Do NOT allow a character to inherit stability from same or lower rank rulers
        # (e.g., an emperor should not inherit a count's or king's stability)
        if = {
            limit = {
                NOT = { has_variable = riseandfall_realm_stability_score }
                holds_landed_title = yes
                exists = scope:previous_holder
                scope:previous_holder = { has_variable = riseandfall_realm_stability_score }
                # Only inherit when the previous holder is strictly higher-ranked than
                # the inheritor. We disallow same-tier inheritance as well.
                # Note: game tier constants map higher numbers -> higher ranks
                # (see common/script_values/00_title_tiers_values.txt: tier_county=2 ... tier_empire=5).
                # Condition: inheritor.highest_held_title_tier < previous_holder.highest_held_title_tier
                # OR previous holder is unlanded (no primary title to compare)
                OR = {
                    scope:previous_holder = { is_landed = no }
                    highest_held_title_tier < scope:previous_holder.highest_held_title_tier
                }
            }
            # Inherit from the previous holder of this specific title
            scope:previous_holder = { save_scope_as = predecessor }
            riseandfall_inherit_stability_score_se = yes
        }
        else_if = {
            limit = {
                NOT = { has_variable = riseandfall_realm_stability_score }
                holds_landed_title = yes
            }
            # No previous holder data or rank check failed; initialize fresh calculation
            riseandfall_calculate_realm_stability_se = yes
        }
    }
}

riseandfall_yearly_realm_stability = {
    trigger = {
        has_game_rule = riseandfall_realm_stability_enabled
    }
    effect = {
        every_ruler = {
            limit = {
                is_landed = yes
                primary_title.tier >= tier_county
            }
            save_scope_as = independent_ruler
            scope:independent_ruler = {
                riseandfall_calculate_realm_stability_se = yes
            }
        }
    }
}
# React to wars being won so we can apply immediate +5/-5 war penalties
riseandfall_war_won_attacker = {
    trigger = { has_game_rule = riseandfall_realm_stability_enabled }
    effect = {
        # Root scope: none; event provides scope:attacker and scope:defender
    # Apply loss to defender. Apply victory effect to attacker only when the
    # war is NOT a peasant rebellion (peasant wars should not count as valid wins).
    scope:defender = { riseandfall_war_loss_se = yes }
    if = { limit = { scope:war = { NOT = { using_cb = peasant_war } } } scope:attacker = { riseandfall_war_victory_se = yes } }
    }
}

riseandfall_war_won_defender = {
    trigger = { has_game_rule = riseandfall_realm_stability_enabled }
    effect = {
        # Root scope: none; event provides scope:attacker and scope:defender
    # Apply loss to attacker. Apply victory effect to defender only for non-peasant wars
    scope:attacker = { riseandfall_war_loss_se = yes }
    if = { limit = { scope:war = { NOT = { using_cb = peasant_war } } } scope:defender = { riseandfall_war_victory_se = yes } }
    }
}