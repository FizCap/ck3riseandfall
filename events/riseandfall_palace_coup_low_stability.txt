namespace = palace_coup

palace_coup.1001 = {
	type = character_event
	title = palace_coup.1001.t
	desc = palace_coup.1001.desc
	theme = court

	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:challenger
	}
    


	immediate = {
		root = {
			every_held_title = {
				add_to_list = lost_titles
			}
		}
		# Save the event's root scope under a stable name for cross-scope variable access
		save_scope_as = event_root
		# Select challenger preferring the courtier with the highest total stats
		# (Diplomacy + Martial + Stewardship + Intrigue + Learning). If none
		# match the eligibility filters we fall back to the existing random selection.
		# Initialize a best-value tracker on the saved event_root scope.
		scope:event_root = { set_variable = { name = tmp_best_challenger_score value = -999 } }

		# Male-preference/only laws: only consider male courtiers
		if = {
			limit = { root = { OR = { has_realm_law = male_only_law has_realm_law = male_preference_law } } }
			every_courtier = {
				limit = { is_knight = yes is_landed = no is_alive = yes is_male = yes }
				# Compute candidate total inside the candidate scope
				set_variable = { name = candidate_total value = diplomacy }
				change_variable = { name = candidate_total add = martial }
				change_variable = { name = candidate_total add = stewardship }
				change_variable = { name = candidate_total add = intrigue }
				change_variable = { name = candidate_total add = learning }
				change_variable = { name = candidate_total add = prowess }
				# If this candidate is better than the saved best, make them the challenger
				if = {
					limit = { var:candidate_total > scope:event_root.var:tmp_best_challenger_score }
					# Save candidate as challenger (saves the current candidate scope)
					save_scope_as = challenger
					# Update the best score on the saved event root scope
					scope:event_root = { set_variable = { name = tmp_best_challenger_score value = var:candidate_total } }
				}
			}
		}
			
		else_if = {
			# Female-preference/only laws: only consider female courtiers
			limit = { root = { OR = { has_realm_law = female_only_law has_realm_law = female_preference_law } } }
			every_courtier = {
				limit = { is_knight = yes is_landed = no is_alive = yes is_female = yes }
				set_variable = { name = candidate_total value = diplomacy }
				change_variable = { name = candidate_total add = martial }
				change_variable = { name = candidate_total add = stewardship }
				change_variable = { name = candidate_total add = intrigue }
				change_variable = { name = candidate_total add = learning }
				change_variable = { name = candidate_total add = prowess }
				if = {
					limit = { var:candidate_total > scope:event_root.var:tmp_best_challenger_score }
					save_scope_as = challenger
					scope:event_root = { set_variable = { name = tmp_best_challenger_score value = var:candidate_total } }
				}
			}
		}
		else = {
			# No sex-restriction: consider any eligible courtier
			every_courtier = {
				limit = { is_knight = yes is_landed = no is_alive = yes }
				set_variable = { name = candidate_total value = diplomacy }
				change_variable = { name = candidate_total add = martial }
				change_variable = { name = candidate_total add = stewardship }
				change_variable = { name = candidate_total add = intrigue }
				change_variable = { name = candidate_total add = learning }
				change_variable = { name = candidate_total add = prowess }
				if = {
					limit = { var:candidate_total > scope:event_root.var:tmp_best_challenger_score }
					save_scope_as = challenger
					scope:event_root = { set_variable = { name = tmp_best_challenger_score value = var:candidate_total } }
				}
			}
		}
		if = {
			limit = { NOT = { exists = scope:challenger } }
			# Fallback challenger selection also respects male/female-only succession laws
			if = {
				limit = { root = { OR = { has_realm_law = male_only_law has_realm_law = male_preference_law } } }
				random_courtier = {
					limit = {
						is_landed = no
						is_alive = yes
						NOT = { is_close_family_of = root }
						age > 16
						is_male = yes
					}
					save_scope_as = challenger
				}
			}
			else_if = {
				limit = { root = { OR = { has_realm_law = female_only_law has_realm_law = female_preference_law } } }
				random_courtier = {
					limit = {
						is_landed = no
						is_alive = yes
						NOT = { is_close_family_of = root }
						age > 16
						is_female = yes
					}
					save_scope_as = challenger
				}
			}
			else = {
				random_courtier = {
					limit = {
						is_landed = no
						is_alive = yes
						NOT = { is_close_family_of = root }
						age > 16
					}
					save_scope_as = challenger
				}
			}
		}

		if = {
			limit = { exists = scope:challenger }

			hidden_effect = {
				# Kill ~50% of courtiers and guests
				root = {
					every_courtier_or_guest = {
						limit = {
							is_alive = yes
							NOT = { this = root }
						}
						random_list = {
							50 = {
								death = {
									death_reason = death_in_palace_coup
									killer = scope:challenger
								}
							}
							50 = { }
						}
					}
				}
			}
		}		# Create a temporary landless adventurer camp for the challenger
		if = {
			limit = { exists = scope:challenger }
			create_adventurer_title = {
				name = palace_coup_adventurer_camp_name
				holder = scope:challenger
				government = landless_adventurer_government
				save_scope_as = palace_coup_challenger_camp_title
			}
			scope:palace_coup_challenger_camp_title = {
				set_variable = { name = riseandfall_created_adventurer_title value = yes }
			}
		}

	# set a cooldown used by the low stability system (on root)
	set_variable = { name = low_stability_cooldown value = yes days = 1825 }

	# Also set the cooldown variable on the challenger to prevent immediate repeat triggers
	if = { limit = { exists = scope:challenger } scope:challenger = { set_variable = { name = low_stability_cooldown value = yes days = 1825 } } }
	}

	# Option to confront the challenger
	option = {
		name = palace_coup.1001.a
		custom_tooltip = palace_coup.1001.tooltip
		trigger = { exists = scope:challenger }
		# Trigger the choice event
		trigger_event = { id = palace_coup.1002 }
		ai_chance = { base = 100 }
	}

}

palace_coup.1002 = {
	type = character_event
	title = palace_coup.1002.t
	desc = palace_coup.1002.d
	theme = court

	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:challenger
	}

	immediate = {
		# (compat) external saved target `palace_coup_target_challenger` removed — not used by this mod
	}

	option = {
		name = palace_coup.1002.a
		custom_tooltip = palace_coup.1002.tooltip
		trigger = { exists = scope:challenger }

		duel = {
			skill = prowess
			target = scope:challenger

			# Root wins duel
			5 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 1
					min = -20
				}

				custom_tooltip = palace_coup.1002.win.tooltip

				# Kill challenger
				hidden_effect = {
					scope:challenger = {
						death = {
							death_reason = death_duel
							killer = root
						}
					}
				}
			}

			# Challenger wins duel
			95 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -1
					min = -20
				}

				custom_tooltip = palace_coup.1002.lose.tooltip

				hidden_effect = {
					# Challenger seizes titles while root is still alive
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
					}
					# Transfer all non-barony titles from root to challenger
					every_held_title = {
						limit = {
							holder = root
							NOT = { tier = tier_barony }
						}
						change_title_holder = {
							holder = scope:challenger
							change = scope:change
							take_baronies = yes
						}
					}
					resolve_title_and_vassal_change = scope:change
					scope:challenger = {
						if = {
							limit = { root = { has_legitimacy = yes } }
							add_legitimacy = -1200
						}
					}

					scope:challenger = {
						add_trait = murderer
					}

					root = {
						every_courtier_or_guest = {
							limit = {
								this != root
								this != scope:challenger
							}

							random = {
								chance = 100

								if = {
									limit = {
										employer != scope:challenger
									}

									set_employer = scope:challenger
								}

								if = {
									limit = {
										not = { exists = involved_activity }
									}

									set_location_to_default = yes
								}
								else = {
									return_to_court = yes
								}
							}
						}
					}

					# Trigger death event for root
					root = { trigger_event = { id = palace_coup.1004 } }
				}
			}
		}

		ai_chance = {
			base = 0
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 1 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 2 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 3 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 4 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 5 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 6 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 7 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 8 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 9 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 10 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 11 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 12 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 13 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 14 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 15 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 16 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 17 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 18 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 19 }
			}
			modifier = {
				add = 5
				prowess_diff = { target = scope:challenger value >= 20 }
			}
		}
	}

	option = {
		name = palace_coup.1002.b
		trigger = { exists = scope:challenger }

		duel = {
			skill = intrigue
			target = scope:challenger

			# Success: root escapes
			95 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}

				custom_tooltip = palace_coup.1002.flee_success.tooltip

				hidden_effect = {
					# Transfer root's capital county (if any) to challenger, then transfer all duchy+ titles
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
					}
					# Transfer capital county specifically (if it exists and is held by root).
					if = {
						limit = { root = { capital_county = { exists = yes } } }
						root = {
							capital_county = {
								change_title_holder = {
									holder = scope:challenger
									change = scope:change
									take_baronies = yes
								}
							}
						}
					}
					# Transfer all duchy+ titles (exclude counties and baronies)
					every_held_title = {
						limit = {
							holder = root
							NOT = {
								OR = {
									tier = tier_county
									tier = tier_barony
								}
							}
						}
						change_title_holder = {
							holder = scope:challenger
							change = scope:change
							take_baronies = yes
						}
					}
		                
		                # Make the old ruler (root) a vassal of the challenger and
		                # transfer direct vassals to the challenger in the same change
					root = {
						change_liege = {
							liege = scope:challenger
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change

					# Give root strong claims on all titles lost to the challenger
					every_in_list = {
						list = lost_titles
						root = { make_claim_strong = prev }
					}

					# Trigger escape follow-up: call banners event for root
					root = { trigger_event = { id = palace_coup.1003 } }

					scope:challenger = {
						if = {
							limit = { root = { has_legitimacy = yes } }
							add_legitimacy = -1200
						}
					}

					# Make root and the challenger rivals of each other
					root = {
						if = {
							limit = { can_set_relation_rival_trigger = { CHARACTER = scope:challenger } }
							set_relation_rival = {
								target = scope:challenger
								reason = riseandfall_adventurer_became_rival
							}
						}
					}
					scope:challenger = {
						if = {
							limit = { can_set_relation_rival_trigger = { CHARACTER = root } }
							set_relation_rival = {
								target = root
								reason = riseandfall_adventurer_became_rival
							}
						}
					}

					root = {
						every_courtier_or_guest = {
							limit = {
								this != root
								this != scope:challenger
							}

							random = {
								chance = 50

								if = {
									limit = {
										employer != scope:challenger
									}

									set_employer = scope:challenger
								}

								if = {
									limit = {
										not = { exists = involved_activity }
									}

									set_location_to_default = yes
								}
								else = {
									return_to_court = yes
								}
							}
						}
					}
				}
			}			# Failure: challenger captures/seizes the ruler
			5 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}

				custom_tooltip = palace_coup.1002.fail.tooltip

				hidden_effect = {
					create_title_and_vassal_change = {
						type = conquest
						save_scope_as = change
					}
					# Transfer all non-barony titles from root to challenger
					every_held_title = {
						limit = {
							holder = root
							NOT = { tier = tier_barony }
						}
						change_title_holder = {
							holder = scope:challenger
							change = scope:change
							take_baronies = yes
						}
					}
					resolve_title_and_vassal_change = scope:change
					scope:challenger = {
						if = {
							limit = { root = { has_legitimacy = yes } }
							add_legitimacy = -1200
						}
					}

					# Make root and the challenger rivals of each other
					root = {
						if = {
							limit = { can_set_relation_rival_trigger = { CHARACTER = scope:challenger } }
							set_relation_rival = {
								target = scope:challenger
								reason = riseandfall_adventurer_became_rival
							}
						}
					}
					scope:challenger = {
						if = {
							limit = { can_set_relation_rival_trigger = { CHARACTER = root } }
							set_relation_rival = {
								target = root
								reason = riseandfall_adventurer_became_rival
							}
						}
						add_trait = murderer
					}

					root = {
						every_courtier_or_guest = {
							limit = {
								this != root
								this != scope:challenger
							}

							random = {
								chance = 100

								if = {
									limit = {
										employer != scope:challenger
									}

									set_employer = scope:challenger
								}

								if = {
									limit = {
										not = { exists = involved_activity }
									}

									set_location_to_default = yes
								}
								else = {
									return_to_court = yes
								}
							}
						}
					}

					# Trigger death event for root
					root = { trigger_event = { id = palace_coup.1004 } }
				}
			}
		}

		ai_chance = {
			base = 100
			modifier = {
				add = 10
				NOT = { intrigue_diff = { target = scope:challenger value <= 0 } }
			}
			modifier = {
				add = -10
				intrigue_diff = { target = scope:challenger value <= -1 }
			}
			modifier = {
				add = 100
				prowess_diff = { target = scope:challenger value <= -1 }
			}
		}
	}
}

palace_coup.1003 = {
	type = character_event
	title = palace_coup.1003.t
	desc = palace_coup.1003.d
	theme = court

    left_portrait = {
		character = root
	}

	option = {
		name = palace_coup.1003.a
		custom_tooltip = palace_coup.1003.tooltip
		# Call the banners / raise the vassal levy
		# Trigger the warlord path for the challenger (raise banners handled there)
		scope:challenger = {
			trigger_event = { id = warlord.1001 }
		}
		ai_chance = { base = 100 }
	}
}

palace_coup.1004 = {
	type = character_event
	title = palace_coup.1004.t
	desc = palace_coup.1004.d
	theme = court

	left_portrait = { character = root }
	right_portrait = { character = scope:challenger }

	option = {
		name = palace_coup.1004.a
		custom_tooltip = palace_coup.1004.tooltip
		hidden_effect = {
			# Perform the execution/killing of the old ruler.
			root = {
				death = {
					death_reason = death_duel
					killer = scope:challenger
				}
			}
		}
		ai_chance = { base = 100 }
	}

}
