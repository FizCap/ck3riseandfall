namespace = palace_coup

palace_coup.1001 = {
	type = character_event
	title = palace_coup.1001.t
	desc = palace_coup.1001.desc
	theme = court

	left_portrait = {
		character = root
	}
	right_portrait = {
		character = scope:challenger
	}

	immediate = {
		# Select challenger respecting realm sex succession laws on the root's realm.
		if = {
			limit = { root = { OR = { has_realm_law = male_only_law has_realm_law = male_preference_law } } }
			random_courtier = {
				limit = {
					is_knight = yes
					is_landed = no
					is_alive = yes
					is_male = yes
				}
				save_scope_as = challenger
			}
		}
		else_if = {
			limit = { root = { OR = { has_realm_law = female_only_law has_realm_law = female_preference_law } } }
			random_courtier = {
				limit = {
					is_knight = yes
					is_landed = no
					is_alive = yes
					is_female = yes
				}
				save_scope_as = challenger
			}
		}
		else = {
			random_courtier = {
				limit = {
					is_knight = yes
					is_landed = no
					is_alive = yes
				}
				save_scope_as = challenger
			}
		}
		if = {
			limit = { NOT = { exists = scope:challenger } }
			# Fallback challenger selection also respects male/female-only succession laws
			if = {
				limit = { root = { OR = { has_realm_law = male_only_law has_realm_law = male_preference_law } } }
				random_courtier = {
					limit = {
						is_landed = no
						is_alive = yes
						NOT = { is_close_family_of = root }
						age > 16
						is_male = yes
					}
					save_scope_as = challenger
				}
			}
			else_if = {
				limit = { root = { OR = { has_realm_law = female_only_law has_realm_law = female_preference_law } } }
				random_courtier = {
					limit = {
						is_landed = no
						is_alive = yes
						NOT = { is_close_family_of = root }
						age > 16
						is_female = yes
					}
					save_scope_as = challenger
				}
			}
			else = {
				random_courtier = {
					limit = {
						is_landed = no
						is_alive = yes
						NOT = { is_close_family_of = root }
						age > 16
					}
					save_scope_as = challenger
				}
			}
		}
		# set a cooldown variable used by the low stability system
		set_variable = { name = low_stability_cooldown value = yes days = 1825 }
		# (duel will be resolved when the player chooses option A)
	}

	option = {
		name = palace_coup.1001.a

		# Only show if we actually have a challenger
		trigger = { exists = scope:challenger }

		duel = {
			skill = prowess
			target = scope:challenger

			# Actor (root) wins outcome
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}

				# Root kills challenger (non-instant fatality handled by death_reason)
				scope:challenger = {
					death = {
						death_reason = death_duel
						killer = root
					}
				}

				# Purge: some of the ruler's unlanded knights and courtiers die in the chaos
				root = {
					# Kill ~50% of unlanded knights in the ruler's court
					every_courtier = {
						limit = {
							is_knight = yes
							is_landed = no
							is_alive = yes
						}
						random_list = {
							50 = {
								death = {
									death_reason = death_in_palace_coup
                                    killer = scope:challenger
								}
							}
							50 = { }
						}
					}

					# Kill ~20% of the remaining non-knight courtiers
					every_courtier_or_guest = {
						limit = {
							exists = yes
							is_alive = yes
							NOT = { is_knight = yes }
						}
						random_list = {
							20 = {
								death = {
									death_reason = death_in_palace_coup
                                    killer = scope:challenger
								}
							}
							80 = { }
						}
					}
				}
			}

			# Challenger wins outcome
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}

				# Challenger seizes titles while root is still alive, then kills root
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
				}
				# Transfer all non-barony titles from root to challenger
				every_held_title = {
					limit = {
						holder = root
						NOT = { tier = tier_barony }
					}
					change_title_holder = {
						holder = scope:challenger
						change = scope:change
						take_baronies = yes
					}
				}
				resolve_title_and_vassal_change = scope:change
				scope:challenger = {
					if = {
						limit = { root = { has_legitimacy = yes } }
						add_legitimacy = -1200
					}
				}
				# Kill the ruler after titles have been reassigned
				death = {
					death_reason = death_duel
					killer = scope:challenger
				}
				scope:challenger = {
					add_trait = murderer
				}
			}


		}

		ai_chance = {
			base = 10
		  modifier = {
			  add = 80
			  # Favor the duel if root's prowess is higher than the challenger
			  NOT = { prowess_diff = { target = scope:challenger value <= 0 } }
		  }
		  modifier = {
			  add = -40
			  # Discourage duel if root is much weaker in prowess than the challenger
			  prowess_diff = { target = scope:challenger value <= -1 }
		  }
		}
	}

	option = {
		name = palace_coup.1001.b

		# Only show if we actually have a challenger
		trigger = {
			exists = scope:challenger
			primary_title = { tier >= tier_duchy }
		}

		duel = {
			skill = intrigue
			target = scope:challenger

			# Success: root successfully evades/covers their tracks and escapes
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}



				# Transfer root's capital county (if any) to challenger, then transfer all duchy+ titles
				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
				}
				# Transfer capital county specifically (if it exists and is held by root).
				# Use an explicit `root = { capital_county = ... }` block so the parser
				# doesn't attempt to resolve `capital_county` at tooltip-time and
				# so we operate on root's capital safely.
				if = {
					limit = { root = { capital_county = { exists = yes } } }
					root = {
						capital_county = {
							change_title_holder = {
								holder = scope:challenger
								change = scope:change
								take_baronies = yes
							}
						}
					}
				}
				# Transfer all duchy+ titles (exclude counties and baronies)
				every_held_title = {
					limit = {
						holder = root
						NOT = {
							OR = {
								tier = tier_county
								tier = tier_barony
							}
						}
					}
					change_title_holder = {
						holder = scope:challenger
						change = scope:change
						take_baronies = yes
					}
				}
                
	                # Make the old ruler (root) a vassal of the challenger and
	                # transfer direct vassals to the challenger in the same change
					root = {
						change_liege = {
							liege = scope:challenger
							change = scope:change
						}
					}
				resolve_title_and_vassal_change = scope:change
				# Trigger escape follow-up: present the reclaim-your-throne event to root
				trigger_event = { id = palace_coup.1002 }
				scope:challenger = {
					if = {
						limit = { root = { has_legitimacy = yes } }
						add_legitimacy = -1200
					}
				}

				# Make root and the challenger rivals of each other (reason key exists in localization)
				root = {
					if = {
						limit = { can_set_relation_rival_trigger = { CHARACTER = scope:challenger } }
						set_relation_rival = {
							target = scope:challenger
							reason = riseandfall_adventurer_became_rival
						}
					}
				}
				scope:challenger = {
					if = {
						limit = { can_set_relation_rival_trigger = { CHARACTER = root } }
						set_relation_rival = {
							target = root
							reason = riseandfall_adventurer_became_rival
						}
					}
				}
			}

			# Failure: challenger captures/seizes the ruler (transfer titles + kill)
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}

				create_title_and_vassal_change = {
					type = conquest
					save_scope_as = change
				}
				# Transfer all non-barony titles from root to challenger
				every_held_title = {
					limit = {
						holder = root
						NOT = { tier = tier_barony }
					}
					change_title_holder = {
						holder = scope:challenger
						change = scope:change
						take_baronies = yes
					}
				}
					resolve_title_and_vassal_change = scope:change
					scope:challenger = {
						if = {
							limit = { root = { has_legitimacy = yes } }
							add_legitimacy = -1200
						}
					}
				# Make root and the challenger rivals of each other (reason key exists in localization)
				root = {
					if = {
						limit = { can_set_relation_rival_trigger = { CHARACTER = scope:challenger } }
						set_relation_rival = {
							target = scope:challenger
							reason = riseandfall_adventurer_became_rival
						}
					}
				}
				scope:challenger = {
					if = {
						limit = { can_set_relation_rival_trigger = { CHARACTER = root } }
						set_relation_rival = {
							target = root
							reason = riseandfall_adventurer_became_rival
						}
					}
				}
				# Kill the ruler after titles have been reassigned
				death = {
					death_reason = death_duel
					killer = scope:challenger
                    
				}
				scope:challenger = {
					add_trait = murderer
				}
			}
		}

		ai_chance = {
			base = 10
		  modifier = {
			  add = 80
			  # Favor escape if root's intrigue is higher than the challenger
			  NOT = { intrigue_diff = { target = scope:challenger value <= 0 } }
		  }
		  modifier = {
			  add = -40
			  # Discourage escape if root is weaker in intrigue
			  intrigue_diff = { target = scope:challenger value <= -1 }
		  }
		}
	}

}

palace_coup.1002 = {
	type = character_event
	title = palace_coup.1002.t
	desc = palace_coup.1002.d
	theme = court

    left_portrait = {
		character = root
	}

	immediate = {
		# Give root unpressed claims on titles recently taken by the challenger
		every_held_title = {
			limit = {
				holder = scope:challenger
				NOT = { tier = tier_barony }
			}
			root = { add_unpressed_claim = prev }
		}
		# Fire the warlord event on the challenger to start a rebellion path
		# Send an interface message or notification could be done by localization and event text
	}

	option = {
		name = palace_coup.1002.a
			# Trigger the warlord path for the challenger only when this option is chosen
			scope:challenger = {
				trigger_event = { id = warlord.1001 }
			}
			ai_chance = { base = 100 }
	}
}
