##########################
# Rise and Fall - Puppet Low Stability Event
# Triggered when low stability roll succeeds. Offers a powerful vassal the chance to become puppet master via regency diarchy.

namespace = puppet

puppet.1001 = {
    type = character_event
    title = puppet.1001.t
    desc = puppet.1001.d
    theme = realm

    right_portrait = root
    immediate = {
        # Set low stability cooldown on the liege when this event fires
    set_variable = { name = low_stability_cooldown value = yes days = 1825 }
        try_start_diarchy = regency
    }

    option = {
        name = puppet.1001.a
        # Attempt to start a regency diarchy on the liege, then choose the best eligible vassal
        # Scoring: +30 if is_powerful_vassal = yes. Exclude vassals with a recent decline cooldown.
        root = {
            save_scope_as = event_root
            scope:event_root = { set_variable = { name = tmp_best_vassal_score value = -999 } }
            every_vassal = {
                limit = {
                    is_landed = yes
                    age >= 16
                    NOT = { has_variable = puppet_decline_cooldown }
                }
                # initialize candidate score from stats (dip + mar + stew + int + lern)
                set_variable = { name = candidate_total value = diplomacy }
                change_variable = { name = candidate_total add = martial }
                change_variable = { name = candidate_total add = stewardship }
                change_variable = { name = candidate_total add = intrigue }
                change_variable = { name = candidate_total add = learning }
                # Bonus if flagged powerful
                if = { limit = { is_powerful_vassal = yes } change_variable = { name = candidate_total add = 30 } }
                # copy score onto stable event scope
                save_scope_as = candidate_for_score
                scope:event_root = { set_variable = { name = tmp_candidate value = scope:candidate_for_score.var:candidate_total } }
                if = {
                    limit = { scope:event_root = { has_variable = tmp_candidate } }
                    if = {
                        limit = { scope:event_root.var:tmp_candidate > scope:event_root.var:tmp_best_vassal_score }
                        save_scope_as = chosen_vassal
                        scope:event_root = { set_variable = { name = tmp_best_vassal_score value = scope:event_root.var:tmp_candidate } }
                    }
                }
            }
            # If we found a chosen vassal, trigger puppet.1002 on them; otherwise fall back to a random eligible powerful vassal
            if = {
                limit = { exists = scope:chosen_vassal }
                scope:chosen_vassal = { trigger_event = { id = puppet.1002 } }
            }
            else = {
                random_powerful_vassal = {
                    limit = {
                        is_landed = yes
                        age >= 16
                        NOT = { has_variable = puppet_decline_cooldown }
                    }
                    trigger_event = puppet.1002
                }
            }
        }
    }
}

puppet.1002 = {
    type = character_event
    title = puppet.1002.t
    desc = puppet.1002.d
    theme = realm
    immediate = {
        # Save our liege as a scope for use by effects (so scope:liege is defined)
        liege = { save_scope_as = liege }
        # Save the event root (the chosen vassal) so we can reference it in fallbacks
        root = { save_scope_as = candidate_vassal }
    }
    left_portrait = liege
    right_portrait = root

    option = {
        name = puppet.1002.a
        ai_chance = {
            factor = 100  # AI always accepts
        }
        # Accept: Have the liege set the chosen (root) character as diarch
        scope:liege = {
            # Validate candidate is old enough before attempting to set diarch
            if = {
                limit = {
                    scope:candidate_vassal = { age >= 16 }
                }
                set_diarch = scope:candidate_vassal
                set_diarchy_type = puppet_regency
                set_diarchy_swing = 90
            }
            else = {
                # Candidate invalid for diarchy (e.g. not a landed vassal) — pick another vassal if possible
                random_powerful_vassal = {
                    limit = {
                            NOT = { this = scope:candidate_vassal }
                            is_landed = yes
                            age >= 16
                    }
                    trigger_event = puppet.1002
                }
            }
        }
    }

    option = {
        name = puppet.1002.b
        ai_chance = {
            factor = 0  # AI never declines
        }
        # Decline: have the liege pick another random powerful vassal (excluding the current root) and trigger the event for them
        liege = {
            # If the liege is the player (human), set a temporary decline cooldown on the candidate so they are not re-offered immediately
            if = {
                limit = { is_ai = no }
                scope:candidate_vassal = { set_variable = { name = puppet_decline_cooldown value = yes days = 365 } }
            }
            random_powerful_vassal = {
                limit = { NOT = { this = scope:candidate_vassal } }
                trigger_event = puppet.1002
            }
        }
    }
}
